In archive liblcd.a:

lcd.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000594  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000005c8  2**0
                  ALLOC
  3 .stab         00000be8  00000000  00000000  000005c8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cec  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <power_int>:
 * @param base: The base integer.
 * @param exponent: The exponent integer.
 * @return: The result of 'base' raised to the power of 'exponent' as a signed 32-bit integer.
 */
s32 power_int(s32 base, s32 exponent) 
{
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	3b 01       	movw	r6, r22
  1a:	4c 01       	movw	r8, r24
  1c:	59 01       	movw	r10, r18
  1e:	6a 01       	movw	r12, r20
  20:	21 e0       	ldi	r18, 0x01	; 1
  22:	30 e0       	ldi	r19, 0x00	; 0
  24:	40 e0       	ldi	r20, 0x00	; 0
  26:	50 e0       	ldi	r21, 0x00	; 0
  28:	ee 24       	eor	r14, r14
  2a:	ff 24       	eor	r15, r15
  2c:	87 01       	movw	r16, r14
  2e:	00 c0       	rjmp	.+0      	; 0x30 <power_int+0x30>
    s32 result = 1;
    s32 i;

    for (i = 0; i < exponent; i++) {
        result *= base;
  30:	ca 01       	movw	r24, r20
  32:	b9 01       	movw	r22, r18
  34:	a4 01       	movw	r20, r8
  36:	93 01       	movw	r18, r6
  38:	0e 94 00 00 	call	0	; 0x0 <power_int>
  3c:	9b 01       	movw	r18, r22
  3e:	ac 01       	movw	r20, r24
s32 power_int(s32 base, s32 exponent) 
{
    s32 result = 1;
    s32 i;

    for (i = 0; i < exponent; i++) {
  40:	08 94       	sec
  42:	e1 1c       	adc	r14, r1
  44:	f1 1c       	adc	r15, r1
  46:	01 1d       	adc	r16, r1
  48:	11 1d       	adc	r17, r1
  4a:	ea 14       	cp	r14, r10
  4c:	fb 04       	cpc	r15, r11
  4e:	0c 05       	cpc	r16, r12
  50:	1d 05       	cpc	r17, r13
  52:	04 f0       	brlt	.+0      	; 0x54 <power_int+0x54>
        result *= base;
    }
    return result;
}
  54:	b9 01       	movw	r22, r18
  56:	ca 01       	movw	r24, r20
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	df 90       	pop	r13
  62:	cf 90       	pop	r12
  64:	bf 90       	pop	r11
  66:	af 90       	pop	r10
  68:	9f 90       	pop	r9
  6a:	8f 90       	pop	r8
  6c:	7f 90       	pop	r7
  6e:	6f 90       	pop	r6
  70:	08 95       	ret

00000072 <rev_num>:
 *
 * @param num: The positive 32-bit integer to be reversed.
 * @return The integer with its digits reversed.
 */
u32 rev_num(u32 num)
{
  72:	6f 92       	push	r6
  74:	7f 92       	push	r7
  76:	8f 92       	push	r8
  78:	9f 92       	push	r9
  7a:	af 92       	push	r10
  7c:	bf 92       	push	r11
  7e:	cf 92       	push	r12
  80:	df 92       	push	r13
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  8a:	3b 01       	movw	r6, r22
  8c:	4c 01       	movw	r8, r24
  8e:	81 e0       	ldi	r24, 0x01	; 1
  90:	a8 2e       	mov	r10, r24
  92:	b1 2c       	mov	r11, r1
  94:	c1 2c       	mov	r12, r1
  96:	d1 2c       	mov	r13, r1
  98:	00 c0       	rjmp	.+0      	; 0x9a <rev_num+0x28>
	u32 rev = 1;

	while (num)
	{
		rev = (rev * 10) + (num % 10);
  9a:	c6 01       	movw	r24, r12
  9c:	b5 01       	movw	r22, r10
  9e:	2a e0       	ldi	r18, 0x0A	; 10
  a0:	30 e0       	ldi	r19, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	50 e0       	ldi	r21, 0x00	; 0
  a6:	0e 94 00 00 	call	0	; 0x0 <power_int>
  aa:	7b 01       	movw	r14, r22
  ac:	8c 01       	movw	r16, r24
  ae:	c4 01       	movw	r24, r8
  b0:	b3 01       	movw	r22, r6
  b2:	0e 94 00 00 	call	0	; 0x0 <power_int>
  b6:	5b 01       	movw	r10, r22
  b8:	6c 01       	movw	r12, r24
  ba:	ae 0c       	add	r10, r14
  bc:	bf 1c       	adc	r11, r15
  be:	c0 1e       	adc	r12, r16
  c0:	d1 1e       	adc	r13, r17
		num /= 10;
  c2:	c4 01       	movw	r24, r8
  c4:	b3 01       	movw	r22, r6
  c6:	2a e0       	ldi	r18, 0x0A	; 10
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	50 e0       	ldi	r21, 0x00	; 0
  ce:	0e 94 00 00 	call	0	; 0x0 <power_int>
  d2:	c9 01       	movw	r24, r18
  d4:	da 01       	movw	r26, r20
  d6:	3c 01       	movw	r6, r24
  d8:	4d 01       	movw	r8, r26
 */
u32 rev_num(u32 num)
{
	u32 rev = 1;

	while (num)
  da:	61 14       	cp	r6, r1
  dc:	71 04       	cpc	r7, r1
  de:	81 04       	cpc	r8, r1
  e0:	91 04       	cpc	r9, r1
  e2:	01 f4       	brne	.+0      	; 0xe4 <rev_num+0x72>
	{
		rev = (rev * 10) + (num % 10);
		num /= 10;
	}
	return rev;
}
  e4:	b5 01       	movw	r22, r10
  e6:	c6 01       	movw	r24, r12
  e8:	1f 91       	pop	r17
  ea:	0f 91       	pop	r16
  ec:	ff 90       	pop	r15
  ee:	ef 90       	pop	r14
  f0:	df 90       	pop	r13
  f2:	cf 90       	pop	r12
  f4:	bf 90       	pop	r11
  f6:	af 90       	pop	r10
  f8:	9f 90       	pop	r9
  fa:	8f 90       	pop	r8
  fc:	7f 90       	pop	r7
  fe:	6f 90       	pop	r6
 100:	08 95       	ret

00000102 <LCD_SendFallingEdge>:
 * LCD_SendFallingEdge - Sends a falling edge signal to the LCD module.
 *
 * Note: This function is intended for internal use within the LCD driver and
 * should not be called directly from outside the driver.
 */
static void LCD_SendFallingEdge(){
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
    
    DIO_voidSetPinValue  ( LCD_E_PORT_ID, LCD_E_PIN_ID , HIGH );
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	62 e0       	ldi	r22, 0x02	; 2
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	0e 94 00 00 	call	0	; 0x0 <power_int>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 110:	00 ea       	ldi	r16, 0xA0	; 160
 112:	1f e0       	ldi	r17, 0x0F	; 15
 114:	c8 01       	movw	r24, r16
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	01 f4       	brne	.+0      	; 0x11a <LCD_SendFallingEdge+0x18>
	_delay_ms(1);
	DIO_voidSetPinValue  ( LCD_E_PORT_ID, LCD_E_PIN_ID , LOW  );
 11a:	80 e0       	ldi	r24, 0x00	; 0
 11c:	62 e0       	ldi	r22, 0x02	; 2
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	0e 94 00 00 	call	0	; 0x0 <power_int>
 124:	c8 01       	movw	r24, r16
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	01 f4       	brne	.+0      	; 0x12a <LCD_SendFallingEdge+0x28>
	_delay_ms(1);
}
 12a:	1f 91       	pop	r17
 12c:	0f 91       	pop	r16
 12e:	08 95       	ret

00000130 <LCD_displayCharacter>:
 * cursor position.
 *
 * @param data: The character to be displayed on the LCD.
 */
void LCD_displayCharacter(u8 data)
{
 130:	1f 93       	push	r17
 132:	18 2f       	mov	r17, r24
	/* sending upper nibble */
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, GET_BIT(data, 7));  
 134:	48 2f       	mov	r20, r24
 136:	44 1f       	adc	r20, r20
 138:	44 27       	eor	r20, r20
 13a:	44 1f       	adc	r20, r20
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	64 e0       	ldi	r22, 0x04	; 4
 140:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, GET_BIT(data, 6));  
 144:	41 2f       	mov	r20, r17
 146:	42 95       	swap	r20
 148:	46 95       	lsr	r20
 14a:	46 95       	lsr	r20
 14c:	41 70       	andi	r20, 0x01	; 1
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	62 e0       	ldi	r22, 0x02	; 2
 152:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, GET_BIT(data, 5));  
 156:	41 2f       	mov	r20, r17
 158:	42 95       	swap	r20
 15a:	46 95       	lsr	r20
 15c:	41 70       	andi	r20, 0x01	; 1
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, GET_BIT(data, 4));  
 166:	41 2f       	mov	r20, r17
 168:	42 95       	swap	r20
 16a:	41 70       	andi	r20, 0x01	; 1
 16c:	81 e0       	ldi	r24, 0x01	; 1
 16e:	60 e0       	ldi	r22, 0x00	; 0
 170:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue  ( LCD_RS_PORT_ID , LCD_RS_PIN_ID , HIGH );		/* RS=1, data reg. */
 174:	80 e0       	ldi	r24, 0x00	; 0
 176:	63 e0       	ldi	r22, 0x03	; 3
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	0e 94 00 00 	call	0	; 0x0 <power_int>
	LCD_SendFallingEdge();
 17e:	0e 94 00 00 	call	0	; 0x0 <power_int>

	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, GET_BIT(data, 3));  
 182:	41 2f       	mov	r20, r17
 184:	46 95       	lsr	r20
 186:	46 95       	lsr	r20
 188:	46 95       	lsr	r20
 18a:	41 70       	andi	r20, 0x01	; 1
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	64 e0       	ldi	r22, 0x04	; 4
 190:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, GET_BIT(data, 2));  
 194:	41 2f       	mov	r20, r17
 196:	46 95       	lsr	r20
 198:	46 95       	lsr	r20
 19a:	41 70       	andi	r20, 0x01	; 1
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, GET_BIT(data, 1));  
 1a4:	41 2f       	mov	r20, r17
 1a6:	46 95       	lsr	r20
 1a8:	41 70       	andi	r20, 0x01	; 1
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, GET_BIT(data, 0)); 
 1b2:	11 70       	andi	r17, 0x01	; 1
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	41 2f       	mov	r20, r17
 1ba:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue  ( LCD_RS_PORT_ID , LCD_RS_PIN_ID , HIGH );		/* RS=1, data reg. */
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	63 e0       	ldi	r22, 0x03	; 3
 1c2:	41 e0       	ldi	r20, 0x01	; 1
 1c4:	0e 94 00 00 	call	0	; 0x0 <power_int>
	LCD_SendFallingEdge();
 1c8:	0e 94 00 00 	call	0	; 0x0 <power_int>
 1cc:	80 ea       	ldi	r24, 0xA0	; 160
 1ce:	9f e0       	ldi	r25, 0x0F	; 15
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	01 f4       	brne	.+0      	; 0x1d4 <LCD_displayCharacter+0xa4>

	_delay_ms(1);
}
 1d4:	1f 91       	pop	r17
 1d6:	08 95       	ret

000001d8 <LCD_sendNumber>:
 * displayed at the current cursor position on the LCD.
 *
 * @param num: The signed 32-bit integer to be displayed on the LCD.
 */
void LCD_sendNumber(s32 num)
{
 1d8:	ef 92       	push	r14
 1da:	ff 92       	push	r15
 1dc:	0f 93       	push	r16
 1de:	1f 93       	push	r17
	u32 n;

	if (num == 0)
 1e0:	61 15       	cp	r22, r1
 1e2:	71 05       	cpc	r23, r1
 1e4:	81 05       	cpc	r24, r1
 1e6:	91 05       	cpc	r25, r1
 1e8:	01 f4       	brne	.+0      	; 0x1ea <LCD_sendNumber+0x12>
	{
		LCD_displayCharacter('0');
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 00 00 	call	0	; 0x0 <power_int>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <LCD_sendNumber+0x1a>
		return;
	}
	if (num < 0)
 1f2:	97 ff       	sbrs	r25, 7
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <LCD_sendNumber+0x1e>
	{
		n = -num;
 1f6:	ee 24       	eor	r14, r14
 1f8:	ff 24       	eor	r15, r15
 1fa:	87 01       	movw	r16, r14
 1fc:	e6 1a       	sub	r14, r22
 1fe:	f7 0a       	sbc	r15, r23
 200:	08 0b       	sbc	r16, r24
 202:	19 0b       	sbc	r17, r25
		LCD_displayCharacter('-');
 204:	8d e2       	ldi	r24, 0x2D	; 45
 206:	0e 94 00 00 	call	0	; 0x0 <power_int>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <LCD_sendNumber+0x34>
	} else
	{
		n = num;
 20c:	7b 01       	movw	r14, r22
 20e:	8c 01       	movw	r16, r24
	}

	n = rev_num(n);
 210:	c8 01       	movw	r24, r16
 212:	b7 01       	movw	r22, r14
 214:	0e 94 00 00 	call	0	; 0x0 <power_int>
 218:	7b 01       	movw	r14, r22
 21a:	8c 01       	movw	r16, r24
 21c:	00 c0       	rjmp	.+0      	; 0x21e <LCD_sendNumber+0x46>

	while ((n != 1))
	{
		LCD_displayCharacter('0' + (n % 10));
 21e:	c8 01       	movw	r24, r16
 220:	b7 01       	movw	r22, r14
 222:	2a e0       	ldi	r18, 0x0A	; 10
 224:	30 e0       	ldi	r19, 0x00	; 0
 226:	40 e0       	ldi	r20, 0x00	; 0
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	0e 94 00 00 	call	0	; 0x0 <power_int>
 22e:	86 2f       	mov	r24, r22
 230:	80 5d       	subi	r24, 0xD0	; 208
 232:	0e 94 00 00 	call	0	; 0x0 <power_int>
		n /= 10;
 236:	c8 01       	movw	r24, r16
 238:	b7 01       	movw	r22, r14
 23a:	2a e0       	ldi	r18, 0x0A	; 10
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	40 e0       	ldi	r20, 0x00	; 0
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	0e 94 00 00 	call	0	; 0x0 <power_int>
 246:	c9 01       	movw	r24, r18
 248:	da 01       	movw	r26, r20
 24a:	7c 01       	movw	r14, r24
 24c:	8d 01       	movw	r16, r26
		n = num;
	}

	n = rev_num(n);

	while ((n != 1))
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	e8 16       	cp	r14, r24
 252:	f1 04       	cpc	r15, r1
 254:	01 05       	cpc	r16, r1
 256:	11 05       	cpc	r17, r1
 258:	01 f4       	brne	.+0      	; 0x25a <LCD_sendNumber+0x82>
	{
		LCD_displayCharacter('0' + (n % 10));
		n /= 10;
	}
}
 25a:	1f 91       	pop	r17
 25c:	0f 91       	pop	r16
 25e:	ff 90       	pop	r15
 260:	ef 90       	pop	r14
 262:	08 95       	ret

00000264 <LCD_sendFloatNumber>:
 *
 * @param num: The floating-point number to be displayed on the LCD.
 * @param numsAfterDecimalPoint: The number of decimal places to display after the decimal point.
 */
void LCD_sendFloatNumber(f32 num, s32 numsAfterDcimalPoint)
{
 264:	2f 92       	push	r2
 266:	3f 92       	push	r3
 268:	4f 92       	push	r4
 26a:	5f 92       	push	r5
 26c:	6f 92       	push	r6
 26e:	7f 92       	push	r7
 270:	8f 92       	push	r8
 272:	9f 92       	push	r9
 274:	af 92       	push	r10
 276:	bf 92       	push	r11
 278:	cf 92       	push	r12
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	df 93       	push	r29
 286:	cf 93       	push	r28
 288:	00 d0       	rcall	.+0      	; 0x28a <LCD_sendFloatNumber+0x26>
 28a:	00 d0       	rcall	.+0      	; 0x28c <LCD_sendFloatNumber+0x28>
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	69 83       	std	Y+1, r22	; 0x01
 292:	7a 83       	std	Y+2, r23	; 0x02
 294:	8b 83       	std	Y+3, r24	; 0x03
 296:	9c 83       	std	Y+4, r25	; 0x04
 298:	19 01       	movw	r2, r18
 29a:	2a 01       	movw	r4, r20
	if (numsAfterDcimalPoint < 1)
 29c:	12 16       	cp	r1, r18
 29e:	13 06       	cpc	r1, r19
 2a0:	14 06       	cpc	r1, r20
 2a2:	15 06       	cpc	r1, r21
 2a4:	04 f0       	brlt	.+0      	; 0x2a6 <LCD_sendFloatNumber+0x42>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <LCD_sendFloatNumber+0x44>
		return;
	
	s32 intpart = (s32) num;
 2a8:	0e 94 00 00 	call	0	; 0x0 <power_int>
 2ac:	3b 01       	movw	r6, r22
 2ae:	4c 01       	movw	r8, r24
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	a9 2e       	mov	r10, r25
 2b4:	b1 2c       	mov	r11, r1
 2b6:	c1 2c       	mov	r12, r1
 2b8:	d1 2c       	mov	r13, r1
 2ba:	ee 24       	eor	r14, r14
 2bc:	ff 24       	eor	r15, r15
 2be:	87 01       	movw	r16, r14
{
    s32 result = 1;
    s32 i;

    for (i = 0; i < exponent; i++) {
        result *= base;
 2c0:	c6 01       	movw	r24, r12
 2c2:	b5 01       	movw	r22, r10
 2c4:	2a e0       	ldi	r18, 0x0A	; 10
 2c6:	30 e0       	ldi	r19, 0x00	; 0
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	0e 94 00 00 	call	0	; 0x0 <power_int>
 2d0:	5b 01       	movw	r10, r22
 2d2:	6c 01       	movw	r12, r24
s32 power_int(s32 base, s32 exponent) 
{
    s32 result = 1;
    s32 i;

    for (i = 0; i < exponent; i++) {
 2d4:	08 94       	sec
 2d6:	e1 1c       	adc	r14, r1
 2d8:	f1 1c       	adc	r15, r1
 2da:	01 1d       	adc	r16, r1
 2dc:	11 1d       	adc	r17, r1
 2de:	e2 14       	cp	r14, r2
 2e0:	f3 04       	cpc	r15, r3
 2e2:	04 05       	cpc	r16, r4
 2e4:	15 05       	cpc	r17, r5
 2e6:	04 f0       	brlt	.+0      	; 0x2e8 <LCD_sendFloatNumber+0x84>
	if (numsAfterDcimalPoint < 1)
		return;
	
	s32 intpart = (s32) num;
	s32 decpart = (num -  intpart) * (power_int(10, numsAfterDcimalPoint));
	LCD_sendNumber(intpart);
 2e8:	c4 01       	movw	r24, r8
 2ea:	b3 01       	movw	r22, r6
 2ec:	0e 94 00 00 	call	0	; 0x0 <power_int>
	LCD_displayCharacter('.');
 2f0:	8e e2       	ldi	r24, 0x2E	; 46
 2f2:	0e 94 00 00 	call	0	; 0x0 <power_int>
	LCD_sendNumber(decpart);
 2f6:	c4 01       	movw	r24, r8
 2f8:	b3 01       	movw	r22, r6
 2fa:	0e 94 00 00 	call	0	; 0x0 <power_int>
 2fe:	9b 01       	movw	r18, r22
 300:	ac 01       	movw	r20, r24
 302:	69 81       	ldd	r22, Y+1	; 0x01
 304:	7a 81       	ldd	r23, Y+2	; 0x02
 306:	8b 81       	ldd	r24, Y+3	; 0x03
 308:	9c 81       	ldd	r25, Y+4	; 0x04
 30a:	0e 94 00 00 	call	0	; 0x0 <power_int>
 30e:	7b 01       	movw	r14, r22
 310:	8c 01       	movw	r16, r24
 312:	c6 01       	movw	r24, r12
 314:	b5 01       	movw	r22, r10
 316:	0e 94 00 00 	call	0	; 0x0 <power_int>
 31a:	9b 01       	movw	r18, r22
 31c:	ac 01       	movw	r20, r24
 31e:	c8 01       	movw	r24, r16
 320:	b7 01       	movw	r22, r14
 322:	0e 94 00 00 	call	0	; 0x0 <power_int>
 326:	0e 94 00 00 	call	0	; 0x0 <power_int>
 32a:	0e 94 00 00 	call	0	; 0x0 <power_int>
}
 32e:	0f 90       	pop	r0
 330:	0f 90       	pop	r0
 332:	0f 90       	pop	r0
 334:	0f 90       	pop	r0
 336:	cf 91       	pop	r28
 338:	df 91       	pop	r29
 33a:	1f 91       	pop	r17
 33c:	0f 91       	pop	r16
 33e:	ff 90       	pop	r15
 340:	ef 90       	pop	r14
 342:	df 90       	pop	r13
 344:	cf 90       	pop	r12
 346:	bf 90       	pop	r11
 348:	af 90       	pop	r10
 34a:	9f 90       	pop	r9
 34c:	8f 90       	pop	r8
 34e:	7f 90       	pop	r7
 350:	6f 90       	pop	r6
 352:	5f 90       	pop	r5
 354:	4f 90       	pop	r4
 356:	3f 90       	pop	r3
 358:	2f 90       	pop	r2
 35a:	08 95       	ret

0000035c <LCD_SendString>:
 *
 * @param str: Pointer to the null-terminated string to be displayed on the LCD.
 *             The string should be no longer than the width of the LCD (usually 20 characters).
 *             Note: The function will not display characters outside the 20-character width.
 */
void LCD_SendString (const char *str){
 35c:	1f 93       	push	r17
 35e:	cf 93       	push	r28
 360:	df 93       	push	r29
 362:	ec 01       	movw	r28, r24
 364:	10 e0       	ldi	r17, 0x00	; 0
 366:	00 c0       	rjmp	.+0      	; 0x368 <LCD_SendString+0xc>
    u8 Iterator_u8 = 0 ;

	while( str[Iterator_u8] != '\0' ){

		LCD_displayCharacter( str[Iterator_u8] );
 368:	0e 94 00 00 	call	0	; 0x0 <power_int>
		Iterator_u8++ ;
 36c:	1f 5f       	subi	r17, 0xFF	; 255
 *             Note: The function will not display characters outside the 20-character width.
 */
void LCD_SendString (const char *str){
    u8 Iterator_u8 = 0 ;

	while( str[Iterator_u8] != '\0' ){
 36e:	fe 01       	movw	r30, r28
 370:	e1 0f       	add	r30, r17
 372:	f1 1d       	adc	r31, r1
 374:	80 81       	ld	r24, Z
 376:	88 23       	and	r24, r24
 378:	01 f4       	brne	.+0      	; 0x37a <LCD_SendString+0x1e>

		LCD_displayCharacter( str[Iterator_u8] );
		Iterator_u8++ ;
	}
}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	08 95       	ret

00000382 <LCD_sendCommand>:
 * the cursor position, turning on/off the display, clearing the screen, etc.
 *
 * @param command: The command byte to be sent to the LCD.
 */
void LCD_sendCommand(u8 command)
{
 382:	1f 93       	push	r17
 384:	18 2f       	mov	r17, r24
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, GET_BIT(command, 7));  
 386:	48 2f       	mov	r20, r24
 388:	44 1f       	adc	r20, r20
 38a:	44 27       	eor	r20, r20
 38c:	44 1f       	adc	r20, r20
 38e:	81 e0       	ldi	r24, 0x01	; 1
 390:	64 e0       	ldi	r22, 0x04	; 4
 392:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, GET_BIT(command, 6));  
 396:	41 2f       	mov	r20, r17
 398:	42 95       	swap	r20
 39a:	46 95       	lsr	r20
 39c:	46 95       	lsr	r20
 39e:	41 70       	andi	r20, 0x01	; 1
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	62 e0       	ldi	r22, 0x02	; 2
 3a4:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, GET_BIT(command, 5));  
 3a8:	41 2f       	mov	r20, r17
 3aa:	42 95       	swap	r20
 3ac:	46 95       	lsr	r20
 3ae:	41 70       	andi	r20, 0x01	; 1
 3b0:	81 e0       	ldi	r24, 0x01	; 1
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, GET_BIT(command, 4));  
 3b8:	41 2f       	mov	r20, r17
 3ba:	42 95       	swap	r20
 3bc:	41 70       	andi	r20, 0x01	; 1
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	60 e0       	ldi	r22, 0x00	; 0
 3c2:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue  ( LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOW );		/* RS=1, data reg. */
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	63 e0       	ldi	r22, 0x03	; 3
 3ca:	40 e0       	ldi	r20, 0x00	; 0
 3cc:	0e 94 00 00 	call	0	; 0x0 <power_int>
	LCD_SendFallingEdge();
 3d0:	0e 94 00 00 	call	0	; 0x0 <power_int>

	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, GET_BIT(command, 3));  
 3d4:	41 2f       	mov	r20, r17
 3d6:	46 95       	lsr	r20
 3d8:	46 95       	lsr	r20
 3da:	46 95       	lsr	r20
 3dc:	41 70       	andi	r20, 0x01	; 1
 3de:	81 e0       	ldi	r24, 0x01	; 1
 3e0:	64 e0       	ldi	r22, 0x04	; 4
 3e2:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, GET_BIT(command, 2));  
 3e6:	41 2f       	mov	r20, r17
 3e8:	46 95       	lsr	r20
 3ea:	46 95       	lsr	r20
 3ec:	41 70       	andi	r20, 0x01	; 1
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	62 e0       	ldi	r22, 0x02	; 2
 3f2:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, GET_BIT(command, 1));  
 3f6:	41 2f       	mov	r20, r17
 3f8:	46 95       	lsr	r20
 3fa:	41 70       	andi	r20, 0x01	; 1
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	61 e0       	ldi	r22, 0x01	; 1
 400:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, GET_BIT(command, 0)); 
 404:	11 70       	andi	r17, 0x01	; 1
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	60 e0       	ldi	r22, 0x00	; 0
 40a:	41 2f       	mov	r20, r17
 40c:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinValue  ( LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOW );		/* RS=1, data reg. */
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	63 e0       	ldi	r22, 0x03	; 3
 414:	40 e0       	ldi	r20, 0x00	; 0
 416:	0e 94 00 00 	call	0	; 0x0 <power_int>
	LCD_SendFallingEdge();
 41a:	0e 94 00 00 	call	0	; 0x0 <power_int>
 41e:	80 ea       	ldi	r24, 0xA0	; 160
 420:	9f e0       	ldi	r25, 0x0F	; 15
 422:	01 97       	sbiw	r24, 0x01	; 1
 424:	01 f4       	brne	.+0      	; 0x426 <LCD_sendCommand+0xa4>

	_delay_ms(1); /* delay for processing Th = 13ns */

}
 426:	1f 91       	pop	r17
 428:	08 95       	ret

0000042a <LCD_clearScreen>:
 * characters and cursor positions. After calling this function, the LCD will
 * be completely blank.
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	0e 94 00 00 	call	0	; 0x0 <power_int>
}
 430:	08 95       	ret

00000432 <LCD_moveCursor>:
void LCD_moveCursor(u8 row_u8,u8 pos_u8)
{
	if (row_u8 < 0 || pos_u8 < 0)
		return;
	
	if (row_u8 == 0 && pos_u8<20)
 432:	88 23       	and	r24, r24
 434:	01 f4       	brne	.+0      	; 0x436 <LCD_moveCursor+0x4>
 436:	64 31       	cpi	r22, 0x14	; 20
 438:	00 f4       	brcc	.+0      	; 0x43a <LCD_moveCursor+0x8>
		LCD_sendCommand((pos_u8 + 0x80));	/* Command of first row and required position<20 */
 43a:	86 2f       	mov	r24, r22
 43c:	80 58       	subi	r24, 0x80	; 128
 43e:	00 c0       	rjmp	.+0      	; 0x440 <LCD_moveCursor+0xe>
	else if (row_u8 == 1 && pos_u8<20)
 440:	81 30       	cpi	r24, 0x01	; 1
 442:	01 f4       	brne	.+0      	; 0x444 <LCD_moveCursor+0x12>
 444:	64 31       	cpi	r22, 0x14	; 20
 446:	00 f4       	brcc	.+0      	; 0x448 <LCD_moveCursor+0x16>
		LCD_sendCommand((pos_u8 + 0xC0));	/* Command of first row and required position<20 */
 448:	86 2f       	mov	r24, r22
 44a:	80 54       	subi	r24, 0x40	; 64
 44c:	00 c0       	rjmp	.+0      	; 0x44e <LCD_moveCursor+0x1c>
	else if (row_u8 == 2 && pos_u8<20)
 44e:	82 30       	cpi	r24, 0x02	; 2
 450:	01 f4       	brne	.+0      	; 0x452 <LCD_moveCursor+0x20>
 452:	64 31       	cpi	r22, 0x14	; 20
 454:	00 f4       	brcc	.+0      	; 0x456 <LCD_moveCursor+0x24>
		LCD_sendCommand((pos_u8 + 0x94));	/* Command of first row and required position<20 */
 456:	86 2f       	mov	r24, r22
 458:	8c 56       	subi	r24, 0x6C	; 108
 45a:	0e 94 00 00 	call	0	; 0x0 <power_int>
 45e:	08 95       	ret
	else if (row_u8 == 3 && pos_u8<20)
 460:	83 30       	cpi	r24, 0x03	; 3
 462:	01 f4       	brne	.+0      	; 0x464 <LCD_moveCursor+0x32>
 464:	64 31       	cpi	r22, 0x14	; 20
 466:	00 f4       	brcc	.+0      	; 0x468 <LCD_moveCursor+0x36>
		LCD_sendCommand((pos_u8 + 0xD4));	/* Command of first row and required position<20 */
 468:	86 2f       	mov	r24, r22
 46a:	8c 52       	subi	r24, 0x2C	; 44
 46c:	0e 94 00 00 	call	0	; 0x0 <power_int>
 470:	08 95       	ret

00000472 <LCD_sendSpecialChar>:
 * @param positionCGRAM: The position in CGRAM (0 to 7) where the custom pattern will be stored.
 * @param row: The row (0 to 3) where the custom character will be displayed on the LCD.
 * @param col: The column (0 to 19) where the custom character will be displayed on the LCD.
 */
void LCD_sendSpecialChar(u8 *letter, u8 positionCGRAM, u8 row, u8 col)
{
 472:	df 92       	push	r13
 474:	ef 92       	push	r14
 476:	ff 92       	push	r15
 478:	0f 93       	push	r16
 47a:	1f 93       	push	r17
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	7c 01       	movw	r14, r24
 482:	16 2f       	mov	r17, r22
 484:	04 2f       	mov	r16, r20
 486:	d2 2e       	mov	r13, r18
	if (row > 3 || col > 19 || positionCGRAM > 7)
 488:	44 30       	cpi	r20, 0x04	; 4
 48a:	00 f4       	brcc	.+0      	; 0x48c <LCD_sendSpecialChar+0x1a>
 48c:	83 e1       	ldi	r24, 0x13	; 19
 48e:	82 17       	cp	r24, r18
 490:	00 f0       	brcs	.+0      	; 0x492 <LCD_sendSpecialChar+0x20>
 492:	68 30       	cpi	r22, 0x08	; 8
 494:	00 f4       	brcc	.+0      	; 0x496 <LCD_sendSpecialChar+0x24>
		return;
	
	LCD_sendCommand(lcd_CGRAM + (positionCGRAM * 8));
 496:	86 2f       	mov	r24, r22
 498:	88 0f       	add	r24, r24
 49a:	88 0f       	add	r24, r24
 49c:	88 0f       	add	r24, r24
 49e:	80 5c       	subi	r24, 0xC0	; 192
 4a0:	0e 94 00 00 	call	0	; 0x0 <power_int>
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	d0 e0       	ldi	r29, 0x00	; 0
	for (u8 i = 0; (i < (u8) 8); i++)
	{
		LCD_displayCharacter(letter[i]);
 4a8:	f7 01       	movw	r30, r14
 4aa:	ec 0f       	add	r30, r28
 4ac:	fd 1f       	adc	r31, r29
 4ae:	80 81       	ld	r24, Z
 4b0:	0e 94 00 00 	call	0	; 0x0 <power_int>
 4b4:	21 96       	adiw	r28, 0x01	; 1
{
	if (row > 3 || col > 19 || positionCGRAM > 7)
		return;
	
	LCD_sendCommand(lcd_CGRAM + (positionCGRAM * 8));
	for (u8 i = 0; (i < (u8) 8); i++)
 4b6:	c8 30       	cpi	r28, 0x08	; 8
 4b8:	d1 05       	cpc	r29, r1
 4ba:	01 f4       	brne	.+0      	; 0x4bc <LCD_sendSpecialChar+0x4a>
	{
		LCD_displayCharacter(letter[i]);
	}
	LCD_moveCursor(row,col);
 4bc:	80 2f       	mov	r24, r16
 4be:	6d 2d       	mov	r22, r13
 4c0:	0e 94 00 00 	call	0	; 0x0 <power_int>
    LCD_displayCharacter(positionCGRAM);
 4c4:	81 2f       	mov	r24, r17
 4c6:	0e 94 00 00 	call	0	; 0x0 <power_int>
 4ca:	df 91       	pop	r29
 4cc:	cf 91       	pop	r28
 4ce:	1f 91       	pop	r17
 4d0:	0f 91       	pop	r16
 4d2:	ff 90       	pop	r15
 4d4:	ef 90       	pop	r14
 4d6:	df 90       	pop	r13
 4d8:	08 95       	ret

000004da <LCD_displayString_XY>:
 * @param str: Pointer to the null-terminated string to be displayed on the LCD.
 *             The string should be no longer than the width of the LCD (usually 20 characters).
 *             Note: The function will not display characters outside the 20-character width.
 */
void LCD_displayString_XY(u8 row_u8, u8 pos_u8, const char *str)
{
 4da:	cf 93       	push	r28
 4dc:	df 93       	push	r29
 4de:	ea 01       	movw	r28, r20
	if (row_u8 < 0 || pos_u8 < 0)
		return;
	/*send char to location XY*/
	if (row_u8 == 0 && pos_u8<20)
 4e0:	88 23       	and	r24, r24
 4e2:	01 f4       	brne	.+0      	; 0x4e4 <LCD_displayString_XY+0xa>
 4e4:	64 31       	cpi	r22, 0x14	; 20
 4e6:	00 f4       	brcc	.+0      	; 0x4e8 <LCD_displayString_XY+0xe>
		LCD_sendCommand(pos_u8 + 0x80);	/* Command of first row and required position<20 */
 4e8:	86 2f       	mov	r24, r22
 4ea:	80 58       	subi	r24, 0x80	; 128
 4ec:	00 c0       	rjmp	.+0      	; 0x4ee <LCD_displayString_XY+0x14>
	else if (row_u8 == 1 && pos_u8<20)
 4ee:	81 30       	cpi	r24, 0x01	; 1
 4f0:	01 f4       	brne	.+0      	; 0x4f2 <LCD_displayString_XY+0x18>
 4f2:	64 31       	cpi	r22, 0x14	; 20
 4f4:	00 f4       	brcc	.+0      	; 0x4f6 <LCD_displayString_XY+0x1c>
		LCD_sendCommand(pos_u8 + 0xC0);	/* Command of first row and required position<20 */
 4f6:	86 2f       	mov	r24, r22
 4f8:	80 54       	subi	r24, 0x40	; 64
 4fa:	00 c0       	rjmp	.+0      	; 0x4fc <LCD_displayString_XY+0x22>
	else if (row_u8 == 2 && pos_u8<20)
 4fc:	82 30       	cpi	r24, 0x02	; 2
 4fe:	01 f4       	brne	.+0      	; 0x500 <LCD_displayString_XY+0x26>
 500:	64 31       	cpi	r22, 0x14	; 20
 502:	00 f4       	brcc	.+0      	; 0x504 <LCD_displayString_XY+0x2a>
		LCD_sendCommand(pos_u8 + 0x94);	/* Command of first row and required position<20 */
 504:	86 2f       	mov	r24, r22
 506:	8c 56       	subi	r24, 0x6C	; 108
 508:	00 c0       	rjmp	.+0      	; 0x50a <LCD_displayString_XY+0x30>
	else if (row_u8 == 3 && pos_u8<20)
 50a:	83 30       	cpi	r24, 0x03	; 3
 50c:	01 f4       	brne	.+0      	; 0x50e <LCD_displayString_XY+0x34>
 50e:	64 31       	cpi	r22, 0x14	; 20
 510:	00 f4       	brcc	.+0      	; 0x512 <LCD_displayString_XY+0x38>
		LCD_sendCommand(pos_u8 + 0xD4);	/* Command of first row and required position<20 */
 512:	86 2f       	mov	r24, r22
 514:	8c 52       	subi	r24, 0x2C	; 44
 516:	0e 94 00 00 	call	0	; 0x0 <power_int>
	LCD_SendString(str);		/* Call LCD string function */
 51a:	ce 01       	movw	r24, r28
 51c:	0e 94 00 00 	call	0	; 0x0 <power_int>
}
 520:	df 91       	pop	r29
 522:	cf 91       	pop	r28
 524:	08 95       	ret

00000526 <LCD_init>:
 * using the _delay_ms() function or equivalent.
 */
void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	DIO_voidSetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,DIO_u8_OUTPUT);
 526:	80 e0       	ldi	r24, 0x00	; 0
 528:	63 e0       	ldi	r22, 0x03	; 3
 52a:	41 e0       	ldi	r20, 0x01	; 1
 52c:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_u8_OUTPUT);
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	62 e0       	ldi	r22, 0x02	; 2
 534:	41 e0       	ldi	r20, 0x01	; 1
 536:	0e 94 00 00 	call	0	; 0x0 <power_int>
 53a:	88 ec       	ldi	r24, 0xC8	; 200
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	20 e9       	ldi	r18, 0x90	; 144
 540:	31 e0       	ldi	r19, 0x01	; 1
 542:	f9 01       	movw	r30, r18
 544:	31 97       	sbiw	r30, 0x01	; 1
 546:	01 f4       	brne	.+0      	; 0x548 <LCD_init+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 548:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 54a:	01 f4       	brne	.+0      	; 0x54c <LCD_init+0x26>

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */


	/* Configure 4 pins in the data port as output pins */
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, DIO_u8_OUTPUT);
 54c:	81 e0       	ldi	r24, 0x01	; 1
 54e:	60 e0       	ldi	r22, 0x00	; 0
 550:	41 e0       	ldi	r20, 0x01	; 1
 552:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, DIO_u8_OUTPUT);
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	61 e0       	ldi	r22, 0x01	; 1
 55a:	41 e0       	ldi	r20, 0x01	; 1
 55c:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, DIO_u8_OUTPUT);
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	62 e0       	ldi	r22, 0x02	; 2
 564:	41 e0       	ldi	r20, 0x01	; 1
 566:	0e 94 00 00 	call	0	; 0x0 <power_int>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, DIO_u8_OUTPUT);
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	64 e0       	ldi	r22, 0x04	; 4
 56e:	41 e0       	ldi	r20, 0x01	; 1
 570:	0e 94 00 00 	call	0	; 0x0 <power_int>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
 574:	83 e3       	ldi	r24, 0x33	; 51
 576:	0e 94 00 00 	call	0	; 0x0 <power_int>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
 57a:	82 e3       	ldi	r24, 0x32	; 50
 57c:	0e 94 00 00 	call	0	; 0x0 <power_int>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 580:	88 e2       	ldi	r24, 0x28	; 40
 582:	0e 94 00 00 	call	0	; 0x0 <power_int>


	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
 586:	8c e0       	ldi	r24, 0x0C	; 12
 588:	0e 94 00 00 	call	0	; 0x0 <power_int>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	0e 94 00 00 	call	0	; 0x0 <power_int>

}
 592:	08 95       	ret
