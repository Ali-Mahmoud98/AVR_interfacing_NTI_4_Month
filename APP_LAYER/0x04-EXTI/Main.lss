
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000069c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  0000069c  00000730  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800064  00800064  00000734  2**0
                  ALLOC
  3 .debug_aranges 00000118  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000208  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000062b  00000000  00000000  00000a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002a3  00000000  00000000  0000107f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000755  00000000  00000000  00001322  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000190  00000000  00000000  00001a78  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000442  00000000  00000000  00001c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c3  00000000  00000000  0000204a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  0000250d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	break;
	}
}

void EXTINT_voidDisable(u8 Copy_u8ExtIntNum)
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
{
	SET_BIT(SREG, SREG_I);
}
//disable interrupt
void GIE_voidGlobalInterruptDisable(void)
{
   4:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_1>
 *
 * @param Copy_u8PortId: An 8-bit unsigned integer representing the port identifier.
 * @return An 8-bit unsigned integer representing the value of the specified port.
 */
u8 DIO_voidGetPortValue(u8 Copy_u8PortId)
{
   8:	0c 94 22 01 	jmp	0x244	; 0x244 <__vector_2>
   c:	0c 94 49 01 	jmp	0x292	; 0x292 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e9       	ldi	r30, 0x9C	; 156
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a4 36       	cpi	r26, 0x64	; 100
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a4 e6       	ldi	r26, 0x64	; 100
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	aa 36       	cpi	r26, 0x6A	; 106
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  8a:	0c 94 4c 03 	jmp	0x698	; 0x698 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <led_ON_callBack>:
    }
}

void led_ON_callBack()
{
	led_toggle(led1);
  92:	60 91 60 00 	lds	r22, 0x0060
  96:	70 91 61 00 	lds	r23, 0x0061
  9a:	80 91 62 00 	lds	r24, 0x0062
  9e:	90 91 63 00 	lds	r25, 0x0063
  a2:	0e 94 96 01 	call	0x32c	; 0x32c <led_toggle>
  a6:	08 95       	ret

000000a8 <main>:

LED led1 = {DIO_u8_PORTA, DIO_u8_PIN6, ACTIVE_HIGH, LOW};

int main(void)
{
	led_init(led1);
  a8:	60 91 60 00 	lds	r22, 0x0060
  ac:	70 91 61 00 	lds	r23, 0x0061
  b0:	80 91 62 00 	lds	r24, 0x0062
  b4:	90 91 63 00 	lds	r25, 0x0063
  b8:	0e 94 bc 01 	call	0x378	; 0x378 <led_init>
	GIE_voidGlobalInterruptEnable();
  bc:	0e 94 70 01 	call	0x2e0	; 0x2e0 <GIE_voidGlobalInterruptEnable>
	EXTINT_voidEnable(EXTINT_INT1,EXTINT_ANY_LOGICAL_CHANGE);
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	63 e0       	ldi	r22, 0x03	; 3
  c4:	0e 94 6a 00 	call	0xd4	; 0xd4 <EXTINT_voidEnable>
	EXTINT_voidSetCallBack(led_ON_callBack,EXTINT_INT1);
  c8:	89 e4       	ldi	r24, 0x49	; 73
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	62 e0       	ldi	r22, 0x02	; 2
  ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <EXTINT_voidSetCallBack>
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <main+0x2a>

000000d4 <EXTINT_voidEnable>:
static void (*EXTINT_ApfuncEXTINT[3])(void);
//Copy_u8ExtIntNum select INT0 INT1 INT2
//Copy_u8EdgeIntSource select sense : Rising,Falling, LOW LEVEL, ANYLOGICAL CHANGE
void EXTINT_voidEnable(u8 Copy_u8ExtIntNum , u8 Copy_u8EdgeIntSource)
{
	switch(Copy_u8ExtIntNum)
  d4:	82 30       	cpi	r24, 0x02	; 2
  d6:	d9 f1       	breq	.+118    	; 0x14e <EXTINT_voidEnable+0x7a>
  d8:	83 30       	cpi	r24, 0x03	; 3
  da:	09 f4       	brne	.+2      	; 0xde <EXTINT_voidEnable+0xa>
  dc:	6d c0       	rjmp	.+218    	; 0x1b8 <EXTINT_voidEnable+0xe4>
  de:	81 30       	cpi	r24, 0x01	; 1
  e0:	09 f0       	breq	.+2      	; 0xe4 <EXTINT_voidEnable+0x10>
  e2:	7f c0       	rjmp	.+254    	; 0x1e2 <EXTINT_voidEnable+0x10e>
	{
	case EXTINT_INT0:
			switch(Copy_u8EdgeIntSource)
  e4:	62 30       	cpi	r22, 0x02	; 2
  e6:	29 f1       	breq	.+74     	; 0x132 <EXTINT_voidEnable+0x5e>
  e8:	63 30       	cpi	r22, 0x03	; 3
  ea:	18 f4       	brcc	.+6      	; 0xf2 <EXTINT_voidEnable+0x1e>
  ec:	61 30       	cpi	r22, 0x01	; 1
  ee:	49 f5       	brne	.+82     	; 0x142 <EXTINT_voidEnable+0x6e>
  f0:	05 c0       	rjmp	.+10     	; 0xfc <EXTINT_voidEnable+0x28>
  f2:	63 30       	cpi	r22, 0x03	; 3
  f4:	a9 f0       	breq	.+42     	; 0x120 <EXTINT_voidEnable+0x4c>
  f6:	64 30       	cpi	r22, 0x04	; 4
  f8:	21 f5       	brne	.+72     	; 0x142 <EXTINT_voidEnable+0x6e>
  fa:	09 c0       	rjmp	.+18     	; 0x10e <EXTINT_voidEnable+0x3a>
			{
				case EXTINT_FALLING_EDGE: CLR_BIT( MCUCR , MCUCR_ISC00 ); SET_BIT( MCUCR , MCUCR_ISC01 ); break;
  fc:	e5 e5       	ldi	r30, 0x55	; 85
  fe:	f0 e0       	ldi	r31, 0x00	; 0
 100:	80 81       	ld	r24, Z
 102:	8e 7f       	andi	r24, 0xFE	; 254
 104:	80 83       	st	Z, r24
 106:	80 81       	ld	r24, Z
 108:	82 60       	ori	r24, 0x02	; 2
 10a:	80 83       	st	Z, r24
 10c:	1a c0       	rjmp	.+52     	; 0x142 <EXTINT_voidEnable+0x6e>
				case EXTINT_LOW_LEVEL: CLR_BIT( MCUCR , MCUCR_ISC00 ); CLR_BIT( MCUCR , MCUCR_ISC01 ); break;
 10e:	e5 e5       	ldi	r30, 0x55	; 85
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8e 7f       	andi	r24, 0xFE	; 254
 116:	80 83       	st	Z, r24
 118:	80 81       	ld	r24, Z
 11a:	8d 7f       	andi	r24, 0xFD	; 253
 11c:	80 83       	st	Z, r24
 11e:	11 c0       	rjmp	.+34     	; 0x142 <EXTINT_voidEnable+0x6e>
				case EXTINT_ANY_LOGICAL_CHANGE: SET_BIT( MCUCR , MCUCR_ISC00 ); CLR_BIT( MCUCR , MCUCR_ISC01 ); break;
 120:	e5 e5       	ldi	r30, 0x55	; 85
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
 12a:	80 81       	ld	r24, Z
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 83       	st	Z, r24
 130:	08 c0       	rjmp	.+16     	; 0x142 <EXTINT_voidEnable+0x6e>
				case EXTINT_RAISING_EDGE: SET_BIT( MCUCR , MCUCR_ISC00 ); SET_BIT( MCUCR , MCUCR_ISC01 ); break;
 132:	e5 e5       	ldi	r30, 0x55	; 85
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 81       	ld	r24, Z
 138:	81 60       	ori	r24, 0x01	; 1
 13a:	80 83       	st	Z, r24
 13c:	80 81       	ld	r24, Z
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	80 83       	st	Z, r24
			}
			SET_BIT(GICR,GICR_INT0);
 142:	eb e5       	ldi	r30, 0x5B	; 91
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	80 64       	ori	r24, 0x40	; 64
 14a:	80 83       	st	Z, r24
 14c:	08 95       	ret
	break;
	case EXTINT_INT1:
			switch(Copy_u8EdgeIntSource)
 14e:	62 30       	cpi	r22, 0x02	; 2
 150:	29 f1       	breq	.+74     	; 0x19c <EXTINT_voidEnable+0xc8>
 152:	63 30       	cpi	r22, 0x03	; 3
 154:	18 f4       	brcc	.+6      	; 0x15c <EXTINT_voidEnable+0x88>
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	49 f5       	brne	.+82     	; 0x1ac <EXTINT_voidEnable+0xd8>
 15a:	05 c0       	rjmp	.+10     	; 0x166 <EXTINT_voidEnable+0x92>
 15c:	63 30       	cpi	r22, 0x03	; 3
 15e:	a9 f0       	breq	.+42     	; 0x18a <EXTINT_voidEnable+0xb6>
 160:	64 30       	cpi	r22, 0x04	; 4
 162:	21 f5       	brne	.+72     	; 0x1ac <EXTINT_voidEnable+0xd8>
 164:	09 c0       	rjmp	.+18     	; 0x178 <EXTINT_voidEnable+0xa4>
			{
				case EXTINT_FALLING_EDGE: CLR_BIT( MCUCR , MCUCR_ISC10 ); SET_BIT( MCUCR , MCUCR_ISC11 ); break;
 166:	e5 e5       	ldi	r30, 0x55	; 85
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8b 7f       	andi	r24, 0xFB	; 251
 16e:	80 83       	st	Z, r24
 170:	80 81       	ld	r24, Z
 172:	88 60       	ori	r24, 0x08	; 8
 174:	80 83       	st	Z, r24
 176:	1a c0       	rjmp	.+52     	; 0x1ac <EXTINT_voidEnable+0xd8>
				case EXTINT_LOW_LEVEL: CLR_BIT( MCUCR , MCUCR_ISC10 ); CLR_BIT( MCUCR , MCUCR_ISC11 ); break;
 178:	e5 e5       	ldi	r30, 0x55	; 85
 17a:	f0 e0       	ldi	r31, 0x00	; 0
 17c:	80 81       	ld	r24, Z
 17e:	8b 7f       	andi	r24, 0xFB	; 251
 180:	80 83       	st	Z, r24
 182:	80 81       	ld	r24, Z
 184:	87 7f       	andi	r24, 0xF7	; 247
 186:	80 83       	st	Z, r24
 188:	11 c0       	rjmp	.+34     	; 0x1ac <EXTINT_voidEnable+0xd8>
				case EXTINT_ANY_LOGICAL_CHANGE: SET_BIT( MCUCR , MCUCR_ISC10 ); CLR_BIT( MCUCR , MCUCR_ISC11 ); break;
 18a:	e5 e5       	ldi	r30, 0x55	; 85
 18c:	f0 e0       	ldi	r31, 0x00	; 0
 18e:	80 81       	ld	r24, Z
 190:	84 60       	ori	r24, 0x04	; 4
 192:	80 83       	st	Z, r24
 194:	80 81       	ld	r24, Z
 196:	87 7f       	andi	r24, 0xF7	; 247
 198:	80 83       	st	Z, r24
 19a:	08 c0       	rjmp	.+16     	; 0x1ac <EXTINT_voidEnable+0xd8>
				case EXTINT_RAISING_EDGE: SET_BIT( MCUCR , MCUCR_ISC10 ); SET_BIT( MCUCR , MCUCR_ISC11 ); break;
 19c:	e5 e5       	ldi	r30, 0x55	; 85
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	84 60       	ori	r24, 0x04	; 4
 1a4:	80 83       	st	Z, r24
 1a6:	80 81       	ld	r24, Z
 1a8:	88 60       	ori	r24, 0x08	; 8
 1aa:	80 83       	st	Z, r24
			}
			/* Enable Ext Int 1 */
			SET_BIT(GICR,GICR_INT1);
 1ac:	eb e5       	ldi	r30, 0x5B	; 91
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	80 81       	ld	r24, Z
 1b2:	80 68       	ori	r24, 0x80	; 128
 1b4:	80 83       	st	Z, r24
 1b6:	08 95       	ret
	break;
	case EXTINT_INT2:
				switch(Copy_u8EdgeIntSource)
 1b8:	61 30       	cpi	r22, 0x01	; 1
 1ba:	19 f0       	breq	.+6      	; 0x1c2 <EXTINT_voidEnable+0xee>
 1bc:	62 30       	cpi	r22, 0x02	; 2
 1be:	61 f4       	brne	.+24     	; 0x1d8 <EXTINT_voidEnable+0x104>
 1c0:	06 c0       	rjmp	.+12     	; 0x1ce <EXTINT_voidEnable+0xfa>
				{
					case EXTINT_FALLING_EDGE: CLR_BIT( MCUCSR , MCUCSR_ISC2 ); break;
 1c2:	e4 e5       	ldi	r30, 0x54	; 84
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	8f 7b       	andi	r24, 0xBF	; 191
 1ca:	80 83       	st	Z, r24
 1cc:	05 c0       	rjmp	.+10     	; 0x1d8 <EXTINT_voidEnable+0x104>
					case EXTINT_RAISING_EDGE: SET_BIT( MCUCSR , MCUCSR_ISC2 ); break;
 1ce:	e4 e5       	ldi	r30, 0x54	; 84
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 64       	ori	r24, 0x40	; 64
 1d6:	80 83       	st	Z, r24
				}
				/* Enable Ext Int 2 */
				SET_BIT(GICR,GICR_INT2);
 1d8:	eb e5       	ldi	r30, 0x5B	; 91
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	80 83       	st	Z, r24
 1e2:	08 95       	ret

000001e4 <EXTINT_voidSetCallBack>:
}
//Copy_u8ExtIntIndex to select INT0 INT1 INT2
//Copy_pfun : the address of the function which will be existed inside ISR
void EXTINT_voidSetCallBack(void(*Copy_pfun)(void),u8 Copy_u8ExtIntIndex)
{
	EXTINT_ApfuncEXTINT[Copy_u8ExtIntIndex] = Copy_pfun;
 1e4:	e6 2f       	mov	r30, r22
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	ee 0f       	add	r30, r30
 1ea:	ff 1f       	adc	r31, r31
 1ec:	ec 59       	subi	r30, 0x9C	; 156
 1ee:	ff 4f       	sbci	r31, 0xFF	; 255
 1f0:	91 83       	std	Z+1, r25	; 0x01
 1f2:	80 83       	st	Z, r24
}
 1f4:	08 95       	ret

000001f6 <__vector_1>:
/* ISR Function for External Interrupt 0 */
// __vector_1 for linker
// __attribute__((signal)) to prevent optimization
void __vector_1(void)  __attribute__((signal));
void __vector_1(void)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	EXTINT_ApfuncEXTINT[EXTINT_INT0]();
 218:	e0 91 66 00 	lds	r30, 0x0066
 21c:	f0 91 67 00 	lds	r31, 0x0067
 220:	09 95       	icall
}
 222:	ff 91       	pop	r31
 224:	ef 91       	pop	r30
 226:	bf 91       	pop	r27
 228:	af 91       	pop	r26
 22a:	9f 91       	pop	r25
 22c:	8f 91       	pop	r24
 22e:	7f 91       	pop	r23
 230:	6f 91       	pop	r22
 232:	5f 91       	pop	r21
 234:	4f 91       	pop	r20
 236:	3f 91       	pop	r19
 238:	2f 91       	pop	r18
 23a:	0f 90       	pop	r0
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	0f 90       	pop	r0
 240:	1f 90       	pop	r1
 242:	18 95       	reti

00000244 <__vector_2>:
/* ISR Function for External Interrupt 0 */
void __vector_2(void)  __attribute__((signal));
void __vector_2(void)
{
 244:	1f 92       	push	r1
 246:	0f 92       	push	r0
 248:	0f b6       	in	r0, 0x3f	; 63
 24a:	0f 92       	push	r0
 24c:	11 24       	eor	r1, r1
 24e:	2f 93       	push	r18
 250:	3f 93       	push	r19
 252:	4f 93       	push	r20
 254:	5f 93       	push	r21
 256:	6f 93       	push	r22
 258:	7f 93       	push	r23
 25a:	8f 93       	push	r24
 25c:	9f 93       	push	r25
 25e:	af 93       	push	r26
 260:	bf 93       	push	r27
 262:	ef 93       	push	r30
 264:	ff 93       	push	r31
	EXTINT_ApfuncEXTINT[EXTINT_INT1]();
 266:	e0 91 68 00 	lds	r30, 0x0068
 26a:	f0 91 69 00 	lds	r31, 0x0069
 26e:	09 95       	icall
}
 270:	ff 91       	pop	r31
 272:	ef 91       	pop	r30
 274:	bf 91       	pop	r27
 276:	af 91       	pop	r26
 278:	9f 91       	pop	r25
 27a:	8f 91       	pop	r24
 27c:	7f 91       	pop	r23
 27e:	6f 91       	pop	r22
 280:	5f 91       	pop	r21
 282:	4f 91       	pop	r20
 284:	3f 91       	pop	r19
 286:	2f 91       	pop	r18
 288:	0f 90       	pop	r0
 28a:	0f be       	out	0x3f, r0	; 63
 28c:	0f 90       	pop	r0
 28e:	1f 90       	pop	r1
 290:	18 95       	reti

00000292 <__vector_3>:
/* ISR Function for External Interrupt 0 */
void __vector_3(void)  __attribute__((signal));
void __vector_3(void)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
	EXTINT_ApfuncEXTINT[EXTINT_INT2]();
 2b4:	e0 91 6a 00 	lds	r30, 0x006A
 2b8:	f0 91 6b 00 	lds	r31, 0x006B
 2bc:	09 95       	icall
}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	0f 90       	pop	r0
 2dc:	1f 90       	pop	r1
 2de:	18 95       	reti

000002e0 <GIE_voidGlobalInterruptEnable>:


//enable global interrupt
void GIE_voidGlobalInterruptEnable(void)
{
	SET_BIT(SREG, SREG_I);
 2e0:	ef e5       	ldi	r30, 0x5F	; 95
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	80 81       	ld	r24, Z
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	80 83       	st	Z, r24
}
 2ea:	08 95       	ret

000002ec <led_off>:
        break;
    }
}
void led_off(LED led)
{
   switch (led.active_state)
 2ec:	88 23       	and	r24, r24
 2ee:	41 f0       	breq	.+16     	; 0x300 <led_off+0x14>
 2f0:	81 30       	cpi	r24, 0x01	; 1
 2f2:	59 f4       	brne	.+22     	; 0x30a <led_off+0x1e>
    {
    case ACTIVE_HIGH:
        DIO_voidSetPinValue(led.led_port, led.led_pin, LOW);
 2f4:	86 2f       	mov	r24, r22
 2f6:	67 2f       	mov	r22, r23
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPinValue>
 2fe:	08 95       	ret
        break;
    case ACTIVE_LOW:
        DIO_voidSetPinValue(led.led_port, led.led_pin, HIGH);
 300:	86 2f       	mov	r24, r22
 302:	67 2f       	mov	r22, r23
 304:	41 e0       	ldi	r20, 0x01	; 1
 306:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPinValue>
 30a:	08 95       	ret

0000030c <led_on>:
        break;
    }
}
void led_on(LED led)
{
    switch (led.active_state)
 30c:	88 23       	and	r24, r24
 30e:	41 f0       	breq	.+16     	; 0x320 <led_on+0x14>
 310:	81 30       	cpi	r24, 0x01	; 1
 312:	59 f4       	brne	.+22     	; 0x32a <led_on+0x1e>
    {
    case ACTIVE_HIGH:
        DIO_voidSetPinValue(led.led_port, led.led_pin, HIGH);
 314:	86 2f       	mov	r24, r22
 316:	67 2f       	mov	r22, r23
 318:	41 e0       	ldi	r20, 0x01	; 1
 31a:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPinValue>
 31e:	08 95       	ret
        break;
    case ACTIVE_LOW:
        DIO_voidSetPinValue(led.led_port, led.led_pin, LOW);
 320:	86 2f       	mov	r24, r22
 322:	67 2f       	mov	r22, r23
 324:	40 e0       	ldi	r20, 0x00	; 0
 326:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPinValue>
 32a:	08 95       	ret

0000032c <led_toggle>:
        DIO_voidSetPinValue(led.led_port, led.led_pin, HIGH);
        break;
    } 
}
void led_toggle(LED led)
{
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	f8 2e       	mov	r15, r24
 336:	e9 2e       	mov	r14, r25
 338:	16 2f       	mov	r17, r22
 33a:	07 2f       	mov	r16, r23
    if (DIO_voidGetPinValue(led.led_port, led.led_pin) == LOW)
 33c:	86 2f       	mov	r24, r22
 33e:	67 2f       	mov	r22, r23
 340:	0e 94 19 03 	call	0x632	; 0x632 <DIO_voidGetPinValue>
 344:	88 23       	and	r24, r24
 346:	39 f4       	brne	.+14     	; 0x356 <led_toggle+0x2a>
    {
        led_on(led);
 348:	61 2f       	mov	r22, r17
 34a:	70 2f       	mov	r23, r16
 34c:	8f 2d       	mov	r24, r15
 34e:	9e 2d       	mov	r25, r14
 350:	0e 94 86 01 	call	0x30c	; 0x30c <led_on>
 354:	0c c0       	rjmp	.+24     	; 0x36e <led_toggle+0x42>
    }
    else if (DIO_voidGetPinValue(led.led_port, led.led_pin) == HIGH)
 356:	81 2f       	mov	r24, r17
 358:	60 2f       	mov	r22, r16
 35a:	0e 94 19 03 	call	0x632	; 0x632 <DIO_voidGetPinValue>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	31 f4       	brne	.+12     	; 0x36e <led_toggle+0x42>
    {
        led_off(led);
 362:	61 2f       	mov	r22, r17
 364:	70 2f       	mov	r23, r16
 366:	8f 2d       	mov	r24, r15
 368:	9e 2d       	mov	r25, r14
 36a:	0e 94 76 01 	call	0x2ec	; 0x2ec <led_off>
    }
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	08 95       	ret

00000378 <led_init>:

#include "DIO_Interface.h"


void led_init(LED led)
{
 378:	ef 92       	push	r14
 37a:	ff 92       	push	r15
 37c:	0f 93       	push	r16
 37e:	1f 93       	push	r17
 380:	08 2f       	mov	r16, r24
 382:	f6 2e       	mov	r15, r22
 384:	e7 2e       	mov	r14, r23
 386:	19 2f       	mov	r17, r25
    /*initialization of led*/
    DIO_voidSetPinDirection(led.led_port, led.led_pin, DIO_u8_OUTPUT);
 388:	86 2f       	mov	r24, r22
 38a:	67 2f       	mov	r22, r23
 38c:	41 e0       	ldi	r20, 0x01	; 1
 38e:	0e 94 85 02 	call	0x50a	; 0x50a <DIO_voidSetPinDirection>
    switch (led.active_state)
 392:	00 23       	and	r16, r16
 394:	91 f0       	breq	.+36     	; 0x3ba <led_init+0x42>
 396:	01 30       	cpi	r16, 0x01	; 1
 398:	f9 f4       	brne	.+62     	; 0x3d8 <led_init+0x60>
    {
    case ACTIVE_HIGH:
        switch (led.start_state)
 39a:	11 23       	and	r17, r17
 39c:	41 f0       	breq	.+16     	; 0x3ae <led_init+0x36>
 39e:	11 30       	cpi	r17, 0x01	; 1
 3a0:	d9 f4       	brne	.+54     	; 0x3d8 <led_init+0x60>
        {
        case HIGH:
            DIO_voidSetPinValue(led.led_port, led.led_pin, HIGH);
 3a2:	8f 2d       	mov	r24, r15
 3a4:	6e 2d       	mov	r22, r14
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPinValue>
 3ac:	15 c0       	rjmp	.+42     	; 0x3d8 <led_init+0x60>
            break;
        case LOW:
            DIO_voidSetPinValue(led.led_port, led.led_pin, LOW);
 3ae:	8f 2d       	mov	r24, r15
 3b0:	6e 2d       	mov	r22, r14
 3b2:	40 e0       	ldi	r20, 0x00	; 0
 3b4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPinValue>
 3b8:	0f c0       	rjmp	.+30     	; 0x3d8 <led_init+0x60>
            break;
        }
        break;
    case ACTIVE_LOW:
        switch (led.start_state)
 3ba:	11 23       	and	r17, r17
 3bc:	41 f0       	breq	.+16     	; 0x3ce <led_init+0x56>
 3be:	11 30       	cpi	r17, 0x01	; 1
 3c0:	59 f4       	brne	.+22     	; 0x3d8 <led_init+0x60>
        {
        case HIGH:
            DIO_voidSetPinValue(led.led_port, led.led_pin, LOW);
 3c2:	8f 2d       	mov	r24, r15
 3c4:	6e 2d       	mov	r22, r14
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPinValue>
 3cc:	05 c0       	rjmp	.+10     	; 0x3d8 <led_init+0x60>
            break;
        case LOW:
            DIO_voidSetPinValue(led.led_port, led.led_pin, HIGH);
 3ce:	8f 2d       	mov	r24, r15
 3d0:	6e 2d       	mov	r22, r14
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <DIO_voidSetPinValue>
            break;
        }
        break;
    }
}
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	08 95       	ret

000003e2 <DIO_voidSetPinValue>:
 * @return None.
 */
void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
 3e2:	84 30       	cpi	r24, 0x04	; 4
 3e4:	08 f0       	brcs	.+2      	; 0x3e8 <DIO_voidSetPinValue+0x6>
 3e6:	90 c0       	rjmp	.+288    	; 0x508 <DIO_voidSetPinValue+0x126>
 3e8:	68 30       	cpi	r22, 0x08	; 8
 3ea:	08 f0       	brcs	.+2      	; 0x3ee <DIO_voidSetPinValue+0xc>
 3ec:	8d c0       	rjmp	.+282    	; 0x508 <DIO_voidSetPinValue+0x126>
    {
        switch(Copy_u8PortId)   
 3ee:	81 30       	cpi	r24, 0x01	; 1
 3f0:	51 f1       	breq	.+84     	; 0x446 <DIO_voidSetPinValue+0x64>
 3f2:	81 30       	cpi	r24, 0x01	; 1
 3f4:	38 f0       	brcs	.+14     	; 0x404 <DIO_voidSetPinValue+0x22>
 3f6:	82 30       	cpi	r24, 0x02	; 2
 3f8:	09 f4       	brne	.+2      	; 0x3fc <DIO_voidSetPinValue+0x1a>
 3fa:	46 c0       	rjmp	.+140    	; 0x488 <DIO_voidSetPinValue+0xa6>
 3fc:	83 30       	cpi	r24, 0x03	; 3
 3fe:	09 f0       	breq	.+2      	; 0x402 <DIO_voidSetPinValue+0x20>
 400:	83 c0       	rjmp	.+262    	; 0x508 <DIO_voidSetPinValue+0x126>
 402:	63 c0       	rjmp	.+198    	; 0x4ca <DIO_voidSetPinValue+0xe8>
        {
            case DIO_u8_PORTA:  switch(Copy_u8Value)    
 404:	44 23       	and	r20, r20
 406:	21 f0       	breq	.+8      	; 0x410 <DIO_voidSetPinValue+0x2e>
 408:	41 30       	cpi	r20, 0x01	; 1
 40a:	09 f0       	breq	.+2      	; 0x40e <DIO_voidSetPinValue+0x2c>
 40c:	7d c0       	rjmp	.+250    	; 0x508 <DIO_voidSetPinValue+0x126>
 40e:	0e c0       	rjmp	.+28     	; 0x42c <DIO_voidSetPinValue+0x4a>
                                {
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;  
 410:	eb e3       	ldi	r30, 0x3B	; 59
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	20 81       	ld	r18, Z
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	02 c0       	rjmp	.+4      	; 0x420 <DIO_voidSetPinValue+0x3e>
 41c:	88 0f       	add	r24, r24
 41e:	99 1f       	adc	r25, r25
 420:	6a 95       	dec	r22
 422:	e2 f7       	brpl	.-8      	; 0x41c <DIO_voidSetPinValue+0x3a>
 424:	80 95       	com	r24
 426:	82 23       	and	r24, r18
 428:	80 83       	st	Z, r24
 42a:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;   
 42c:	eb e3       	ldi	r30, 0x3B	; 59
 42e:	f0 e0       	ldi	r31, 0x00	; 0
 430:	20 81       	ld	r18, Z
 432:	81 e0       	ldi	r24, 0x01	; 1
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_voidSetPinValue+0x5a>
 438:	88 0f       	add	r24, r24
 43a:	99 1f       	adc	r25, r25
 43c:	6a 95       	dec	r22
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_voidSetPinValue+0x56>
 440:	28 2b       	or	r18, r24
 442:	20 83       	st	Z, r18
 444:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTB:  switch(Copy_u8Value)
 446:	44 23       	and	r20, r20
 448:	21 f0       	breq	.+8      	; 0x452 <DIO_voidSetPinValue+0x70>
 44a:	41 30       	cpi	r20, 0x01	; 1
 44c:	09 f0       	breq	.+2      	; 0x450 <DIO_voidSetPinValue+0x6e>
 44e:	5c c0       	rjmp	.+184    	; 0x508 <DIO_voidSetPinValue+0x126>
 450:	0e c0       	rjmp	.+28     	; 0x46e <DIO_voidSetPinValue+0x8c>
                                {       
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
 452:	e8 e3       	ldi	r30, 0x38	; 56
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	20 81       	ld	r18, Z
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_voidSetPinValue+0x80>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_voidSetPinValue+0x7c>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	80 83       	st	Z, r24
 46c:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
 46e:	e8 e3       	ldi	r30, 0x38	; 56
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	20 81       	ld	r18, Z
 474:	81 e0       	ldi	r24, 0x01	; 1
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	02 c0       	rjmp	.+4      	; 0x47e <DIO_voidSetPinValue+0x9c>
 47a:	88 0f       	add	r24, r24
 47c:	99 1f       	adc	r25, r25
 47e:	6a 95       	dec	r22
 480:	e2 f7       	brpl	.-8      	; 0x47a <DIO_voidSetPinValue+0x98>
 482:	28 2b       	or	r18, r24
 484:	20 83       	st	Z, r18
 486:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTC:  switch(Copy_u8Value)
 488:	44 23       	and	r20, r20
 48a:	21 f0       	breq	.+8      	; 0x494 <DIO_voidSetPinValue+0xb2>
 48c:	41 30       	cpi	r20, 0x01	; 1
 48e:	09 f0       	breq	.+2      	; 0x492 <DIO_voidSetPinValue+0xb0>
 490:	3b c0       	rjmp	.+118    	; 0x508 <DIO_voidSetPinValue+0x126>
 492:	0e c0       	rjmp	.+28     	; 0x4b0 <DIO_voidSetPinValue+0xce>
                                {
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
 494:	e5 e3       	ldi	r30, 0x35	; 53
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	20 81       	ld	r18, Z
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <DIO_voidSetPinValue+0xc2>
 4a0:	88 0f       	add	r24, r24
 4a2:	99 1f       	adc	r25, r25
 4a4:	6a 95       	dec	r22
 4a6:	e2 f7       	brpl	.-8      	; 0x4a0 <DIO_voidSetPinValue+0xbe>
 4a8:	80 95       	com	r24
 4aa:	82 23       	and	r24, r18
 4ac:	80 83       	st	Z, r24
 4ae:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
 4b0:	e5 e3       	ldi	r30, 0x35	; 53
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	20 81       	ld	r18, Z
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	02 c0       	rjmp	.+4      	; 0x4c0 <DIO_voidSetPinValue+0xde>
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	6a 95       	dec	r22
 4c2:	e2 f7       	brpl	.-8      	; 0x4bc <DIO_voidSetPinValue+0xda>
 4c4:	28 2b       	or	r18, r24
 4c6:	20 83       	st	Z, r18
 4c8:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTD:  switch(Copy_u8Value)
 4ca:	44 23       	and	r20, r20
 4cc:	19 f0       	breq	.+6      	; 0x4d4 <DIO_voidSetPinValue+0xf2>
 4ce:	41 30       	cpi	r20, 0x01	; 1
 4d0:	d9 f4       	brne	.+54     	; 0x508 <DIO_voidSetPinValue+0x126>
 4d2:	0e c0       	rjmp	.+28     	; 0x4f0 <DIO_voidSetPinValue+0x10e>
                                {
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
 4d4:	e2 e3       	ldi	r30, 0x32	; 50
 4d6:	f0 e0       	ldi	r31, 0x00	; 0
 4d8:	20 81       	ld	r18, Z
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	02 c0       	rjmp	.+4      	; 0x4e4 <DIO_voidSetPinValue+0x102>
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	6a 95       	dec	r22
 4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <DIO_voidSetPinValue+0xfe>
 4e8:	80 95       	com	r24
 4ea:	82 23       	and	r24, r18
 4ec:	80 83       	st	Z, r24
 4ee:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
 4f0:	e2 e3       	ldi	r30, 0x32	; 50
 4f2:	f0 e0       	ldi	r31, 0x00	; 0
 4f4:	20 81       	ld	r18, Z
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <DIO_voidSetPinValue+0x11e>
 4fc:	88 0f       	add	r24, r24
 4fe:	99 1f       	adc	r25, r25
 500:	6a 95       	dec	r22
 502:	e2 f7       	brpl	.-8      	; 0x4fc <DIO_voidSetPinValue+0x11a>
 504:	28 2b       	or	r18, r24
 506:	20 83       	st	Z, r18
 508:	08 95       	ret

0000050a <DIO_voidSetPinDirection>:
 * @return None.
 */
void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Direction)
{
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
 50a:	84 30       	cpi	r24, 0x04	; 4
 50c:	08 f0       	brcs	.+2      	; 0x510 <DIO_voidSetPinDirection+0x6>
 50e:	90 c0       	rjmp	.+288    	; 0x630 <DIO_voidSetPinDirection+0x126>
 510:	68 30       	cpi	r22, 0x08	; 8
 512:	08 f0       	brcs	.+2      	; 0x516 <DIO_voidSetPinDirection+0xc>
 514:	8d c0       	rjmp	.+282    	; 0x630 <DIO_voidSetPinDirection+0x126>
    {
        switch(Copy_u8PortId)   
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	51 f1       	breq	.+84     	; 0x56e <DIO_voidSetPinDirection+0x64>
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	38 f0       	brcs	.+14     	; 0x52c <DIO_voidSetPinDirection+0x22>
 51e:	82 30       	cpi	r24, 0x02	; 2
 520:	09 f4       	brne	.+2      	; 0x524 <DIO_voidSetPinDirection+0x1a>
 522:	46 c0       	rjmp	.+140    	; 0x5b0 <DIO_voidSetPinDirection+0xa6>
 524:	83 30       	cpi	r24, 0x03	; 3
 526:	09 f0       	breq	.+2      	; 0x52a <DIO_voidSetPinDirection+0x20>
 528:	83 c0       	rjmp	.+262    	; 0x630 <DIO_voidSetPinDirection+0x126>
 52a:	63 c0       	rjmp	.+198    	; 0x5f2 <DIO_voidSetPinDirection+0xe8>
        {
            case DIO_u8_PORTA:  switch(Copy_u8Direction)    
 52c:	44 23       	and	r20, r20
 52e:	21 f0       	breq	.+8      	; 0x538 <DIO_voidSetPinDirection+0x2e>
 530:	41 30       	cpi	r20, 0x01	; 1
 532:	09 f0       	breq	.+2      	; 0x536 <DIO_voidSetPinDirection+0x2c>
 534:	7d c0       	rjmp	.+250    	; 0x630 <DIO_voidSetPinDirection+0x126>
 536:	0e c0       	rjmp	.+28     	; 0x554 <DIO_voidSetPinDirection+0x4a>
                                {
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;  
 538:	ea e3       	ldi	r30, 0x3A	; 58
 53a:	f0 e0       	ldi	r31, 0x00	; 0
 53c:	20 81       	ld	r18, Z
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	02 c0       	rjmp	.+4      	; 0x548 <DIO_voidSetPinDirection+0x3e>
 544:	88 0f       	add	r24, r24
 546:	99 1f       	adc	r25, r25
 548:	6a 95       	dec	r22
 54a:	e2 f7       	brpl	.-8      	; 0x544 <DIO_voidSetPinDirection+0x3a>
 54c:	80 95       	com	r24
 54e:	82 23       	and	r24, r18
 550:	80 83       	st	Z, r24
 552:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;   
 554:	ea e3       	ldi	r30, 0x3A	; 58
 556:	f0 e0       	ldi	r31, 0x00	; 0
 558:	20 81       	ld	r18, Z
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_voidSetPinDirection+0x5a>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	6a 95       	dec	r22
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_voidSetPinDirection+0x56>
 568:	28 2b       	or	r18, r24
 56a:	20 83       	st	Z, r18
 56c:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTB:  switch(Copy_u8Direction)
 56e:	44 23       	and	r20, r20
 570:	21 f0       	breq	.+8      	; 0x57a <DIO_voidSetPinDirection+0x70>
 572:	41 30       	cpi	r20, 0x01	; 1
 574:	09 f0       	breq	.+2      	; 0x578 <DIO_voidSetPinDirection+0x6e>
 576:	5c c0       	rjmp	.+184    	; 0x630 <DIO_voidSetPinDirection+0x126>
 578:	0e c0       	rjmp	.+28     	; 0x596 <DIO_voidSetPinDirection+0x8c>
                                {       
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 57a:	e7 e3       	ldi	r30, 0x37	; 55
 57c:	f0 e0       	ldi	r31, 0x00	; 0
 57e:	20 81       	ld	r18, Z
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_voidSetPinDirection+0x80>
 586:	88 0f       	add	r24, r24
 588:	99 1f       	adc	r25, r25
 58a:	6a 95       	dec	r22
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_voidSetPinDirection+0x7c>
 58e:	80 95       	com	r24
 590:	82 23       	and	r24, r18
 592:	80 83       	st	Z, r24
 594:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 596:	e7 e3       	ldi	r30, 0x37	; 55
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	20 81       	ld	r18, Z
 59c:	81 e0       	ldi	r24, 0x01	; 1
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_voidSetPinDirection+0x9c>
 5a2:	88 0f       	add	r24, r24
 5a4:	99 1f       	adc	r25, r25
 5a6:	6a 95       	dec	r22
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_voidSetPinDirection+0x98>
 5aa:	28 2b       	or	r18, r24
 5ac:	20 83       	st	Z, r18
 5ae:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTC:  switch(Copy_u8Direction)
 5b0:	44 23       	and	r20, r20
 5b2:	21 f0       	breq	.+8      	; 0x5bc <DIO_voidSetPinDirection+0xb2>
 5b4:	41 30       	cpi	r20, 0x01	; 1
 5b6:	09 f0       	breq	.+2      	; 0x5ba <DIO_voidSetPinDirection+0xb0>
 5b8:	3b c0       	rjmp	.+118    	; 0x630 <DIO_voidSetPinDirection+0x126>
 5ba:	0e c0       	rjmp	.+28     	; 0x5d8 <DIO_voidSetPinDirection+0xce>
                                {
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 5bc:	e4 e3       	ldi	r30, 0x34	; 52
 5be:	f0 e0       	ldi	r31, 0x00	; 0
 5c0:	20 81       	ld	r18, Z
 5c2:	81 e0       	ldi	r24, 0x01	; 1
 5c4:	90 e0       	ldi	r25, 0x00	; 0
 5c6:	02 c0       	rjmp	.+4      	; 0x5cc <DIO_voidSetPinDirection+0xc2>
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	6a 95       	dec	r22
 5ce:	e2 f7       	brpl	.-8      	; 0x5c8 <DIO_voidSetPinDirection+0xbe>
 5d0:	80 95       	com	r24
 5d2:	82 23       	and	r24, r18
 5d4:	80 83       	st	Z, r24
 5d6:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 5d8:	e4 e3       	ldi	r30, 0x34	; 52
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	20 81       	ld	r18, Z
 5de:	81 e0       	ldi	r24, 0x01	; 1
 5e0:	90 e0       	ldi	r25, 0x00	; 0
 5e2:	02 c0       	rjmp	.+4      	; 0x5e8 <DIO_voidSetPinDirection+0xde>
 5e4:	88 0f       	add	r24, r24
 5e6:	99 1f       	adc	r25, r25
 5e8:	6a 95       	dec	r22
 5ea:	e2 f7       	brpl	.-8      	; 0x5e4 <DIO_voidSetPinDirection+0xda>
 5ec:	28 2b       	or	r18, r24
 5ee:	20 83       	st	Z, r18
 5f0:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTD:  switch(Copy_u8Direction)
 5f2:	44 23       	and	r20, r20
 5f4:	19 f0       	breq	.+6      	; 0x5fc <DIO_voidSetPinDirection+0xf2>
 5f6:	41 30       	cpi	r20, 0x01	; 1
 5f8:	d9 f4       	brne	.+54     	; 0x630 <DIO_voidSetPinDirection+0x126>
 5fa:	0e c0       	rjmp	.+28     	; 0x618 <DIO_voidSetPinDirection+0x10e>
                                {
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 5fc:	e1 e3       	ldi	r30, 0x31	; 49
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	20 81       	ld	r18, Z
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	02 c0       	rjmp	.+4      	; 0x60c <DIO_voidSetPinDirection+0x102>
 608:	88 0f       	add	r24, r24
 60a:	99 1f       	adc	r25, r25
 60c:	6a 95       	dec	r22
 60e:	e2 f7       	brpl	.-8      	; 0x608 <DIO_voidSetPinDirection+0xfe>
 610:	80 95       	com	r24
 612:	82 23       	and	r24, r18
 614:	80 83       	st	Z, r24
 616:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 618:	e1 e3       	ldi	r30, 0x31	; 49
 61a:	f0 e0       	ldi	r31, 0x00	; 0
 61c:	20 81       	ld	r18, Z
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <DIO_voidSetPinDirection+0x11e>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	6a 95       	dec	r22
 62a:	e2 f7       	brpl	.-8      	; 0x624 <DIO_voidSetPinDirection+0x11a>
 62c:	28 2b       	or	r18, r24
 62e:	20 83       	st	Z, r18
 630:	08 95       	ret

00000632 <DIO_voidGetPinValue>:
u8 DIO_voidGetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    
    u8 Local_u8PinValue = 5;
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
 632:	84 30       	cpi	r24, 0x04	; 4
 634:	78 f5       	brcc	.+94     	; 0x694 <DIO_voidGetPinValue+0x62>
 636:	68 30       	cpi	r22, 0x08	; 8
 638:	68 f5       	brcc	.+90     	; 0x694 <DIO_voidGetPinValue+0x62>
    {
        switch(Copy_u8PortId)   
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	81 f0       	breq	.+32     	; 0x65e <DIO_voidGetPinValue+0x2c>
 63e:	81 30       	cpi	r24, 0x01	; 1
 640:	28 f0       	brcs	.+10     	; 0x64c <DIO_voidGetPinValue+0x1a>
 642:	82 30       	cpi	r24, 0x02	; 2
 644:	a9 f0       	breq	.+42     	; 0x670 <DIO_voidGetPinValue+0x3e>
 646:	83 30       	cpi	r24, 0x03	; 3
 648:	29 f5       	brne	.+74     	; 0x694 <DIO_voidGetPinValue+0x62>
 64a:	1b c0       	rjmp	.+54     	; 0x682 <DIO_voidGetPinValue+0x50>
        {
            case DIO_u8_PORTA:  Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);  break;   
 64c:	89 b3       	in	r24, 0x19	; 25
 64e:	90 e0       	ldi	r25, 0x00	; 0
 650:	02 c0       	rjmp	.+4      	; 0x656 <DIO_voidGetPinValue+0x24>
 652:	95 95       	asr	r25
 654:	87 95       	ror	r24
 656:	6a 95       	dec	r22
 658:	e2 f7       	brpl	.-8      	; 0x652 <DIO_voidGetPinValue+0x20>
 65a:	81 70       	andi	r24, 0x01	; 1
 65c:	08 95       	ret
            case DIO_u8_PORTB:  Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);  break;
 65e:	86 b3       	in	r24, 0x16	; 22
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_voidGetPinValue+0x36>
 664:	95 95       	asr	r25
 666:	87 95       	ror	r24
 668:	6a 95       	dec	r22
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_voidGetPinValue+0x32>
 66c:	81 70       	andi	r24, 0x01	; 1
 66e:	08 95       	ret
            case DIO_u8_PORTC:  Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);  break;
 670:	83 b3       	in	r24, 0x13	; 19
 672:	90 e0       	ldi	r25, 0x00	; 0
 674:	02 c0       	rjmp	.+4      	; 0x67a <DIO_voidGetPinValue+0x48>
 676:	95 95       	asr	r25
 678:	87 95       	ror	r24
 67a:	6a 95       	dec	r22
 67c:	e2 f7       	brpl	.-8      	; 0x676 <DIO_voidGetPinValue+0x44>
 67e:	81 70       	andi	r24, 0x01	; 1
 680:	08 95       	ret
            case DIO_u8_PORTD:  Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);  break;
 682:	80 b3       	in	r24, 0x10	; 16
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_voidGetPinValue+0x5a>
 688:	95 95       	asr	r25
 68a:	87 95       	ror	r24
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_voidGetPinValue+0x56>
 690:	81 70       	andi	r24, 0x01	; 1
 692:	08 95       	ret
 694:	85 e0       	ldi	r24, 0x05	; 5
    else
    {
        
    }
    return Local_u8PinValue;    
}
 696:	08 95       	ret

00000698 <_exit>:
 698:	f8 94       	cli

0000069a <__stop_program>:
 69a:	ff cf       	rjmp	.-2      	; 0x69a <__stop_program>
