
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000060  00800060  00000bc2  00000c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000148  00000000  00000000  00000c96  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000262  00000000  00000000  00000dde  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c7f  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005f7  00000000  00000000  00001cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001039  00000000  00000000  000022b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001f0  00000000  00000000  000032f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000585  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000093b  00000000  00000000  00003a65  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  000043a0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:

    for (i = 0; i < exponent; i++) {
        result *= base;
    }
    return result;
}
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable adc + PRrescalar div factor =128
}

u16 ADC_readChannel(u8 channel_num)
{
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
 *        The value should be a combination of HIGH and LOW (1 and 0) bits representing
 *        the desired output state for each pin in the port.
 * @return None.
 */
void DIO_voidSetPortValue(u8 Copy_u8PortId, u8 Copy_u8Value)
{
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 3c       	cpi	r26, 0xC0	; 192
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 7a 00 	call	0xf4	; 0xf4 <main>
  7a:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <isDigit>:
#include "KEYPAD_Interface.h"

#include <util/delay.h>

int isDigit(u8 c)
{
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	30 e0       	ldi	r19, 0x00	; 0
  86:	80 53       	subi	r24, 0x30	; 48
  88:	8a 30       	cpi	r24, 0x0A	; 10
  8a:	10 f4       	brcc	.+4      	; 0x90 <isDigit+0xe>
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
    if (c >= '0' && c <= '9')
    {
        a = 1;
    }
    return a;
}
  90:	82 2f       	mov	r24, r18
  92:	93 2f       	mov	r25, r19
  94:	08 95       	ret

00000096 <reset_screen>:
void reset_screen()
{
    LCD_displayString_XY(0,0,"                   ");
  96:	80 e0       	ldi	r24, 0x00	; 0
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	40 e6       	ldi	r20, 0x60	; 96
  9c:	50 e0       	ldi	r21, 0x00	; 0
  9e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
    LCD_displayString_XY(0,0,"ERROR");
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	60 e0       	ldi	r22, 0x00	; 0
  a6:	44 e7       	ldi	r20, 0x74	; 116
  a8:	50 e0       	ldi	r21, 0x00	; 0
  aa:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
    LCD_displayString_XY(1,0,"FORMAT is");
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	60 e0       	ldi	r22, 0x00	; 0
  b2:	4a e7       	ldi	r20, 0x7A	; 122
  b4:	50 e0       	ldi	r21, 0x00	; 0
  b6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
    LCD_displayString_XY(2,0,"NUM1 + NUM2");
  ba:	82 e0       	ldi	r24, 0x02	; 2
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	44 e8       	ldi	r20, 0x84	; 132
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
  c6:	20 e3       	ldi	r18, 0x30	; 48
  c8:	35 e7       	ldi	r19, 0x75	; 117
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	40 e9       	ldi	r20, 0x90	; 144
  cc:	51 e0       	ldi	r21, 0x01	; 1
  ce:	ca 01       	movw	r24, r20
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <reset_screen+0x3a>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	21 50       	subi	r18, 0x01	; 1
  d6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d8:	d1 f7       	brne	.-12     	; 0xce <reset_screen+0x38>
    _delay_ms(3000);
    LCD_clearScreen();
  da:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_clearScreen>
    LCD_displayString_XY(0,3,"Calculator:");
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	63 e0       	ldi	r22, 0x03	; 3
  e2:	40 e9       	ldi	r20, 0x90	; 144
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
    LCD_moveCursor((u8) 1, (u8) 0);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_moveCursor>
}
  f2:	08 95       	ret

000000f4 <main>:

int main()
{
  f4:	2f 92       	push	r2
  f6:	3f 92       	push	r3
  f8:	4f 92       	push	r4
  fa:	5f 92       	push	r5
  fc:	6f 92       	push	r6
  fe:	7f 92       	push	r7
 100:	8f 92       	push	r8
 102:	9f 92       	push	r9
 104:	af 92       	push	r10
 106:	bf 92       	push	r11
 108:	cf 92       	push	r12
 10a:	df 92       	push	r13
 10c:	ef 92       	push	r14
 10e:	ff 92       	push	r15
 110:	0f 93       	push	r16
 112:	1f 93       	push	r17
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	cd b7       	in	r28, 0x3d	; 61
 11a:	de b7       	in	r29, 0x3e	; 62
 11c:	2c 97       	sbiw	r28, 0x0c	; 12
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	f8 94       	cli
 122:	de bf       	out	0x3e, r29	; 62
 124:	0f be       	out	0x3f, r0	; 63
 126:	cd bf       	out	0x3d, r28	; 61
    u8 keyPad_Val = 0xFF;
    u16 i = 0;
    u8 start = 0;
    s32 num[3] = {0};
 128:	fe 01       	movw	r30, r28
 12a:	31 96       	adiw	r30, 0x01	; 1
 12c:	8c e0       	ldi	r24, 0x0C	; 12
 12e:	df 01       	movw	r26, r30
 130:	1d 92       	st	X+, r1
 132:	8a 95       	dec	r24
 134:	e9 f7       	brne	.-6      	; 0x130 <main+0x3c>
    // u8 buffer1[12] = {0};
    LCD_init();
 136:	0e 94 fe 03 	call	0x7fc	; 0x7fc <LCD_init>
    ADC_init();
 13a:	0e 94 36 04 	call	0x86c	; 0x86c <ADC_init>
    KPD_voidInit();
 13e:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <KPD_voidInit>


    LCD_displayString_XY(0,3,"Calculator:");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	63 e0       	ldi	r22, 0x03	; 3
 146:	40 e9       	ldi	r20, 0x90	; 144
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
    LCD_moveCursor((u8) 1, (u8) 0);
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_moveCursor>
 156:	66 24       	eor	r6, r6
 158:	77 24       	eor	r7, r7
 15a:	10 e0       	ldi	r17, 0x00	; 0
                num[0] = 0;
                num[1] = 0;
                num[3] = 0;
                i = 0;
                LCD_clearScreen();
                LCD_displayString_XY(0, 3, "Calculator:");
 15c:	0f 2e       	mov	r0, r31
 15e:	f0 e9       	ldi	r31, 0x90	; 144
 160:	2f 2e       	mov	r2, r31
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	3f 2e       	mov	r3, r31
 166:	f0 2d       	mov	r31, r0
            }
            else if (keyPad_Val == '=')
            {
                if (i == 1)
                {
                    LCD_displayString_XY(1, 0, "                "); // Clear the second line
 168:	0f 2e       	mov	r0, r31
 16a:	fe e9       	ldi	r31, 0x9E	; 158
 16c:	4f 2e       	mov	r4, r31
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	5f 2e       	mov	r5, r31
 172:	f0 2d       	mov	r31, r0
 174:	01 c0       	rjmp	.+2      	; 0x178 <main+0x84>
    ADC_init();
    KPD_voidInit();


    LCD_displayString_XY(0,3,"Calculator:");
    LCD_moveCursor((u8) 1, (u8) 0);
 176:	10 e0       	ldi	r17, 0x00	; 0

    while (1)
    {
        keyPad_Val= KPD_u8GetPressedKey();
 178:	0e 94 5e 01 	call	0x2bc	; 0x2bc <KPD_u8GetPressedKey>
 17c:	08 2f       	mov	r16, r24
        if (keyPad_Val != 0xFF)
 17e:	8f 3f       	cpi	r24, 0xFF	; 255
 180:	d9 f3       	breq	.-10     	; 0x178 <main+0x84>
        {
            if (start == 0 && !isDigit(keyPad_Val))
 182:	11 23       	and	r17, r17
 184:	39 f4       	brne	.+14     	; 0x194 <main+0xa0>
 186:	0e 94 41 00 	call	0x82	; 0x82 <isDigit>
 18a:	89 2b       	or	r24, r25
 18c:	39 f4       	brne	.+14     	; 0x19c <main+0xa8>
            {
                reset_screen();
 18e:	0e 94 4b 00 	call	0x96	; 0x96 <reset_screen>
 192:	f2 cf       	rjmp	.-28     	; 0x178 <main+0x84>
            } 
            else if (isDigit(keyPad_Val) && (i < 2))
 194:	0e 94 41 00 	call	0x82	; 0x82 <isDigit>
 198:	89 2b       	or	r24, r25
 19a:	91 f1       	breq	.+100    	; 0x200 <main+0x10c>
            {
                start = 1;
                num[i] = (num[i] * 10) + (keyPad_Val - '0');
 19c:	c3 01       	movw	r24, r6
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	cc 24       	eor	r12, r12
 1a8:	dd 24       	eor	r13, r13
 1aa:	c3 94       	inc	r12
 1ac:	cc 0e       	add	r12, r28
 1ae:	dd 1e       	adc	r13, r29
 1b0:	c8 0e       	add	r12, r24
 1b2:	d9 1e       	adc	r13, r25
 1b4:	e0 2e       	mov	r14, r16
 1b6:	ff 24       	eor	r15, r15
 1b8:	e0 ed       	ldi	r30, 0xD0	; 208
 1ba:	ff ef       	ldi	r31, 0xFF	; 255
 1bc:	ee 0e       	add	r14, r30
 1be:	ff 1e       	adc	r15, r31
 1c0:	47 01       	movw	r8, r14
 1c2:	aa 24       	eor	r10, r10
 1c4:	97 fc       	sbrc	r9, 7
 1c6:	a0 94       	com	r10
 1c8:	ba 2c       	mov	r11, r10
 1ca:	d6 01       	movw	r26, r12
 1cc:	6d 91       	ld	r22, X+
 1ce:	7d 91       	ld	r23, X+
 1d0:	8d 91       	ld	r24, X+
 1d2:	9c 91       	ld	r25, X
 1d4:	2a e0       	ldi	r18, 0x0A	; 10
 1d6:	30 e0       	ldi	r19, 0x00	; 0
 1d8:	40 e0       	ldi	r20, 0x00	; 0
 1da:	50 e0       	ldi	r21, 0x00	; 0
 1dc:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsi3>
 1e0:	dc 01       	movw	r26, r24
 1e2:	cb 01       	movw	r24, r22
 1e4:	88 0d       	add	r24, r8
 1e6:	99 1d       	adc	r25, r9
 1e8:	aa 1d       	adc	r26, r10
 1ea:	bb 1d       	adc	r27, r11
 1ec:	f6 01       	movw	r30, r12
 1ee:	80 83       	st	Z, r24
 1f0:	91 83       	std	Z+1, r25	; 0x01
 1f2:	a2 83       	std	Z+2, r26	; 0x02
 1f4:	b3 83       	std	Z+3, r27	; 0x03
                LCD_displayCharacter(keyPad_Val); 
 1f6:	80 2f       	mov	r24, r16
 1f8:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_displayCharacter>
 1fc:	11 e0       	ldi	r17, 0x01	; 1
 1fe:	bc cf       	rjmp	.-136    	; 0x178 <main+0x84>
            }
            else if (keyPad_Val == '+')
 200:	0b 32       	cpi	r16, 0x2B	; 43
 202:	71 f4       	brne	.+28     	; 0x220 <main+0x12c>
            {
                i = 1; // Set the index to store in the second number
                if (i == 1)
                {
                    LCD_displayString_XY(2, 0,"+"); // Clear the second line
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	60 e0       	ldi	r22, 0x00	; 0
 208:	4c e9       	ldi	r20, 0x9C	; 156
 20a:	50 e0       	ldi	r21, 0x00	; 0
 20c:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
                    LCD_moveCursor(3, 0);
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_moveCursor>
 218:	66 24       	eor	r6, r6
 21a:	77 24       	eor	r7, r7
 21c:	63 94       	inc	r6
 21e:	ac cf       	rjmp	.-168    	; 0x178 <main+0x84>
                }   
            }
            else if (keyPad_Val == '=')
 220:	0d 33       	cpi	r16, 0x3D	; 61
 222:	71 f5       	brne	.+92     	; 0x280 <main+0x18c>
            {
                if (i == 1)
 224:	f1 e0       	ldi	r31, 0x01	; 1
 226:	6f 16       	cp	r6, r31
 228:	71 04       	cpc	r7, r1
 22a:	09 f0       	breq	.+2      	; 0x22e <main+0x13a>
 22c:	a4 cf       	rjmp	.-184    	; 0x176 <main+0x82>
                {
                    LCD_displayString_XY(1, 0, "                "); // Clear the second line
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	60 e0       	ldi	r22, 0x00	; 0
 232:	a2 01       	movw	r20, r4
 234:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
                    LCD_displayString_XY(2, 0, "                "); // Clear the second line
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	a2 01       	movw	r20, r4
 23e:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
                    LCD_displayString_XY(3, 0, "                "); // Clear the second line
 242:	83 e0       	ldi	r24, 0x03	; 3
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	a2 01       	movw	r20, r4
 248:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
                    LCD_moveCursor(1, 0);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	60 e0       	ldi	r22, 0x00	; 0
 250:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_moveCursor>
                    num[3] = num[1] + num[0];
 254:	69 81       	ldd	r22, Y+1	; 0x01
 256:	7a 81       	ldd	r23, Y+2	; 0x02
 258:	8b 81       	ldd	r24, Y+3	; 0x03
 25a:	9c 81       	ldd	r25, Y+4	; 0x04
 25c:	2d 81       	ldd	r18, Y+5	; 0x05
 25e:	3e 81       	ldd	r19, Y+6	; 0x06
 260:	4f 81       	ldd	r20, Y+7	; 0x07
 262:	58 85       	ldd	r21, Y+8	; 0x08
 264:	62 0f       	add	r22, r18
 266:	73 1f       	adc	r23, r19
 268:	84 1f       	adc	r24, r20
 26a:	95 1f       	adc	r25, r21
 26c:	6d 87       	std	Y+13, r22	; 0x0d
 26e:	7e 87       	std	Y+14, r23	; 0x0e
 270:	8f 87       	std	Y+15, r24	; 0x0f
 272:	98 8b       	std	Y+16, r25	; 0x10
                    LCD_sendNumber(num[3]);
 274:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <LCD_sendNumber>
 278:	66 24       	eor	r6, r6
 27a:	77 24       	eor	r7, r7
 27c:	10 e0       	ldi	r17, 0x00	; 0
 27e:	7c cf       	rjmp	.-264    	; 0x178 <main+0x84>
                    i = 0; // Reset the index for the next calculation
                }
                start = 0;
            }
            else if (keyPad_Val == 'C')
 280:	03 34       	cpi	r16, 0x43	; 67
 282:	09 f0       	breq	.+2      	; 0x286 <main+0x192>
 284:	79 cf       	rjmp	.-270    	; 0x178 <main+0x84>
            {
                // Clear the calculator and reset the values
                num[0] = 0;
 286:	19 82       	std	Y+1, r1	; 0x01
 288:	1a 82       	std	Y+2, r1	; 0x02
 28a:	1b 82       	std	Y+3, r1	; 0x03
 28c:	1c 82       	std	Y+4, r1	; 0x04
                num[1] = 0;
 28e:	1d 82       	std	Y+5, r1	; 0x05
 290:	1e 82       	std	Y+6, r1	; 0x06
 292:	1f 82       	std	Y+7, r1	; 0x07
 294:	18 86       	std	Y+8, r1	; 0x08
                num[3] = 0;
 296:	1d 86       	std	Y+13, r1	; 0x0d
 298:	1e 86       	std	Y+14, r1	; 0x0e
 29a:	1f 86       	std	Y+15, r1	; 0x0f
 29c:	18 8a       	std	Y+16, r1	; 0x10
                i = 0;
                LCD_clearScreen();
 29e:	0e 94 aa 03 	call	0x754	; 0x754 <LCD_clearScreen>
                LCD_displayString_XY(0, 3, "Calculator:");
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	63 e0       	ldi	r22, 0x03	; 3
 2a6:	a1 01       	movw	r20, r2
 2a8:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <LCD_displayString_XY>
                LCD_moveCursor(1, 0);
 2ac:	81 e0       	ldi	r24, 0x01	; 1
 2ae:	60 e0       	ldi	r22, 0x00	; 0
 2b0:	0e 94 ae 03 	call	0x75c	; 0x75c <LCD_moveCursor>
 2b4:	66 24       	eor	r6, r6
 2b6:	77 24       	eor	r7, r7
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	5e cf       	rjmp	.-324    	; 0x178 <main+0x84>

000002bc <KPD_u8GetPressedKey>:
/* I/P Parameters: Nothing									          		    **/
/* Returns:it returns u8	                                				    **/
/* Desc:This Function used to get the value of the pressed key		       	    **/
/*********************************************************************************/
u8 KPD_u8GetPressedKey (void)
{
 2bc:	3f 92       	push	r3
 2be:	4f 92       	push	r4
 2c0:	5f 92       	push	r5
 2c2:	6f 92       	push	r6
 2c4:	7f 92       	push	r7
 2c6:	8f 92       	push	r8
 2c8:	9f 92       	push	r9
 2ca:	af 92       	push	r10
 2cc:	bf 92       	push	r11
 2ce:	cf 92       	push	r12
 2d0:	df 92       	push	r13
 2d2:	ef 92       	push	r14
 2d4:	ff 92       	push	r15
 2d6:	0f 93       	push	r16
 2d8:	1f 93       	push	r17
 2da:	df 93       	push	r29
 2dc:	cf 93       	push	r28
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
 2e2:	28 97       	sbiw	r28, 0x08	; 8
 2e4:	0f b6       	in	r0, 0x3f	; 63
 2e6:	f8 94       	cli
 2e8:	de bf       	out	0x3e, r29	; 62
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	cd bf       	out	0x3d, r28	; 61
	   local_u8KeyValue  : the pressed key value in asci ('0' '1' ... '*' '/' ...)
						   initial state =KEYPAD_KEY_NOT_PRESSED = 0xff
	   local_u8Flag      : when a key is pressed flag will be up and the loop will be broken 
						   initially =KEYPAD_u8_FLAG_DOWN; 
	   */
	u8 KEYPAD_Au8RowsPins[KEYPAD_u8_ROW_NUM] = KEYPAD_Au8ROWs;
 2ee:	95 e0       	ldi	r25, 0x05	; 5
 2f0:	99 83       	std	Y+1, r25	; 0x01
 2f2:	84 e0       	ldi	r24, 0x04	; 4
 2f4:	8a 83       	std	Y+2, r24	; 0x02
 2f6:	23 e0       	ldi	r18, 0x03	; 3
 2f8:	2b 83       	std	Y+3, r18	; 0x03
 2fa:	82 e0       	ldi	r24, 0x02	; 2
 2fc:	8c 83       	std	Y+4, r24	; 0x04
	u8 KEYPAD_Au8ColsPins[KEYPAD_u8_COL_NUM] = KEYPAD_Au8Cols;
 2fe:	87 e0       	ldi	r24, 0x07	; 7
 300:	8d 83       	std	Y+5, r24	; 0x05
 302:	86 e0       	ldi	r24, 0x06	; 6
 304:	8e 83       	std	Y+6, r24	; 0x06
 306:	9f 83       	std	Y+7, r25	; 0x07
 308:	28 87       	std	Y+8, r18	; 0x08
 30a:	55 24       	eor	r5, r5
 30c:	5a 94       	dec	r5
 30e:	88 24       	eor	r8, r8
 310:	99 24       	eor	r9, r9
 312:	00 e9       	ldi	r16, 0x90	; 144
 314:	11 e0       	ldi	r17, 0x01	; 1

	for (local_u8RowCounter=0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++ )
	{
		DIO_voidSetPinValue(KEYPAD_u8_ROWS_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter],DIO_u8_LOW); //Activate ROw by Setting 0 at output

		for (local_u8ColCounter=0; local_u8ColCounter < KEYPAD_u8_COL_NUM; local_u8ColCounter++)
 316:	0f 2e       	mov	r0, r31
 318:	f9 e0       	ldi	r31, 0x09	; 9
 31a:	6f 2e       	mov	r6, r31
 31c:	77 24       	eor	r7, r7
 31e:	f0 2d       	mov	r31, r0
 320:	6c 0e       	add	r6, r28
 322:	7d 1e       	adc	r7, r29
		{
			if (DIO_voidGetPinValue(KEYPAD_u8_COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]) == KEYPAD_u8_FLAG_DOWN)
 324:	88 ec       	ldi	r24, 0xC8	; 200
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	48 2e       	mov	r4, r24
 32a:	39 2e       	mov	r3, r25
	u8 KEYPAD_Au8RowsPins[KEYPAD_u8_ROW_NUM] = KEYPAD_Au8ROWs;
	u8 KEYPAD_Au8ColsPins[KEYPAD_u8_COL_NUM] = KEYPAD_Au8Cols;

	for (local_u8RowCounter=0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++ )
	{
		DIO_voidSetPinValue(KEYPAD_u8_ROWS_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter],DIO_u8_LOW); //Activate ROw by Setting 0 at output
 32c:	e1 e0       	ldi	r30, 0x01	; 1
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	ec 0f       	add	r30, r28
 332:	fd 1f       	adc	r31, r29
 334:	e8 0d       	add	r30, r8
 336:	f9 1d       	adc	r31, r9
 338:	a0 80       	ld	r10, Z
 33a:	82 e0       	ldi	r24, 0x02	; 2
 33c:	6a 2d       	mov	r22, r10
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
 344:	0f 2e       	mov	r0, r31
 346:	f5 e0       	ldi	r31, 0x05	; 5
 348:	ef 2e       	mov	r14, r31
 34a:	ff 24       	eor	r15, r15
 34c:	f0 2d       	mov	r31, r0
 34e:	ec 0e       	add	r14, r28
 350:	fd 1e       	adc	r15, r29
 352:	c4 01       	movw	r24, r8
 354:	88 0f       	add	r24, r24
 356:	99 1f       	adc	r25, r25
 358:	88 0f       	add	r24, r24
 35a:	99 1f       	adc	r25, r25
 35c:	0f 2e       	mov	r0, r31
 35e:	ff ea       	ldi	r31, 0xAF	; 175
 360:	cf 2e       	mov	r12, r31
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	df 2e       	mov	r13, r31
 366:	f0 2d       	mov	r31, r0
 368:	c8 0e       	add	r12, r24
 36a:	d9 1e       	adc	r13, r25

		for (local_u8ColCounter=0; local_u8ColCounter < KEYPAD_u8_COL_NUM; local_u8ColCounter++)
		{
			if (DIO_voidGetPinValue(KEYPAD_u8_COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]) == KEYPAD_u8_FLAG_DOWN)
 36c:	f7 01       	movw	r30, r14
 36e:	b0 80       	ld	r11, Z
 370:	83 e0       	ldi	r24, 0x03	; 3
 372:	6b 2d       	mov	r22, r11
 374:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_voidGetPinValue>
 378:	88 23       	and	r24, r24
 37a:	79 f4       	brne	.+30     	; 0x39a <KPD_u8GetPressedKey+0xde>
 37c:	84 2d       	mov	r24, r4
 37e:	93 2d       	mov	r25, r3
 380:	f8 01       	movw	r30, r16
 382:	31 97       	sbiw	r30, 0x01	; 1
 384:	f1 f7       	brne	.-4      	; 0x382 <KPD_u8GetPressedKey+0xc6>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 386:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 388:	d9 f7       	brne	.-10     	; 0x380 <KPD_u8GetPressedKey+0xc4>
			{
				_delay_ms(KEYPAD_u8_DEBOUNCING_MS);
				local_u8KeyValue = KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter];
 38a:	f6 01       	movw	r30, r12
 38c:	50 80       	ld	r5, Z
				while (DIO_voidGetPinValue(KEYPAD_u8_COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]) == KEYPAD_u8_FLAG_DOWN){}
 38e:	83 e0       	ldi	r24, 0x03	; 3
 390:	6b 2d       	mov	r22, r11
 392:	0e 94 6b 05 	call	0xad6	; 0xad6 <DIO_voidGetPinValue>
 396:	88 23       	and	r24, r24
 398:	d1 f3       	breq	.-12     	; 0x38e <KPD_u8GetPressedKey+0xd2>
 39a:	08 94       	sec
 39c:	e1 1c       	adc	r14, r1
 39e:	f1 1c       	adc	r15, r1
 3a0:	08 94       	sec
 3a2:	c1 1c       	adc	r12, r1
 3a4:	d1 1c       	adc	r13, r1

	for (local_u8RowCounter=0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++ )
	{
		DIO_voidSetPinValue(KEYPAD_u8_ROWS_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter],DIO_u8_LOW); //Activate ROw by Setting 0 at output

		for (local_u8ColCounter=0; local_u8ColCounter < KEYPAD_u8_COL_NUM; local_u8ColCounter++)
 3a6:	e6 14       	cp	r14, r6
 3a8:	f7 04       	cpc	r15, r7
 3aa:	01 f7       	brne	.-64     	; 0x36c <KPD_u8GetPressedKey+0xb0>
				local_u8KeyValue = KEYPAD_Au8Keys[local_u8RowCounter][local_u8ColCounter];
				while (DIO_voidGetPinValue(KEYPAD_u8_COLS_PORT, KEYPAD_Au8ColsPins[local_u8ColCounter]) == KEYPAD_u8_FLAG_DOWN){}
			}
			
		}
		DIO_voidSetPinValue(KEYPAD_u8_ROWS_PORT,KEYPAD_Au8RowsPins[local_u8RowCounter],DIO_u8_HIGH); //De-Activate column by Setting 1 at output
 3ac:	82 e0       	ldi	r24, 0x02	; 2
 3ae:	6a 2d       	mov	r22, r10
 3b0:	41 e0       	ldi	r20, 0x01	; 1
 3b2:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
 3b6:	08 94       	sec
 3b8:	81 1c       	adc	r8, r1
 3ba:	91 1c       	adc	r9, r1
						   initially =KEYPAD_u8_FLAG_DOWN; 
	   */
	u8 KEYPAD_Au8RowsPins[KEYPAD_u8_ROW_NUM] = KEYPAD_Au8ROWs;
	u8 KEYPAD_Au8ColsPins[KEYPAD_u8_COL_NUM] = KEYPAD_Au8Cols;

	for (local_u8RowCounter=0; local_u8RowCounter < KEYPAD_u8_ROW_NUM; local_u8RowCounter++ )
 3bc:	f4 e0       	ldi	r31, 0x04	; 4
 3be:	8f 16       	cp	r8, r31
 3c0:	91 04       	cpc	r9, r1
 3c2:	09 f0       	breq	.+2      	; 0x3c6 <KPD_u8GetPressedKey+0x10a>
 3c4:	b3 cf       	rjmp	.-154    	; 0x32c <KPD_u8GetPressedKey+0x70>
		{
			break;
		}
	}
	return local_u8KeyValue;
}
 3c6:	85 2d       	mov	r24, r5
 3c8:	28 96       	adiw	r28, 0x08	; 8
 3ca:	0f b6       	in	r0, 0x3f	; 63
 3cc:	f8 94       	cli
 3ce:	de bf       	out	0x3e, r29	; 62
 3d0:	0f be       	out	0x3f, r0	; 63
 3d2:	cd bf       	out	0x3d, r28	; 61
 3d4:	cf 91       	pop	r28
 3d6:	df 91       	pop	r29
 3d8:	1f 91       	pop	r17
 3da:	0f 91       	pop	r16
 3dc:	ff 90       	pop	r15
 3de:	ef 90       	pop	r14
 3e0:	df 90       	pop	r13
 3e2:	cf 90       	pop	r12
 3e4:	bf 90       	pop	r11
 3e6:	af 90       	pop	r10
 3e8:	9f 90       	pop	r9
 3ea:	8f 90       	pop	r8
 3ec:	7f 90       	pop	r7
 3ee:	6f 90       	pop	r6
 3f0:	5f 90       	pop	r5
 3f2:	4f 90       	pop	r4
 3f4:	3f 90       	pop	r3
 3f6:	08 95       	ret

000003f8 <KPD_voidInit>:
/*********************************************************************************/
void KPD_voidInit(void)
{
	/*Set Rows pins to be output & Columns pins to be input*/
	/*ROW pins to be out*/
	DIO_voidSetPinDirection(KEYPAD_u8_ROWS_PORT, KEYPAD_u8_R1_PIN, DIO_u8_OUTPUT);
 3f8:	82 e0       	ldi	r24, 0x02	; 2
 3fa:	65 e0       	ldi	r22, 0x05	; 5
 3fc:	41 e0       	ldi	r20, 0x01	; 1
 3fe:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_u8_ROWS_PORT, KEYPAD_u8_R2_PIN, DIO_u8_OUTPUT);
 402:	82 e0       	ldi	r24, 0x02	; 2
 404:	64 e0       	ldi	r22, 0x04	; 4
 406:	41 e0       	ldi	r20, 0x01	; 1
 408:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_u8_ROWS_PORT, KEYPAD_u8_R3_PIN, DIO_u8_OUTPUT);
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	63 e0       	ldi	r22, 0x03	; 3
 410:	41 e0       	ldi	r20, 0x01	; 1
 412:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_u8_ROWS_PORT, KEYPAD_u8_R4_PIN, DIO_u8_OUTPUT);
 416:	82 e0       	ldi	r24, 0x02	; 2
 418:	62 e0       	ldi	r22, 0x02	; 2
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	/*COL pins input*/
	DIO_voidSetPinDirection(KEYPAD_u8_COLS_PORT, KEYPAD_u8_C1_PIN, DIO_u8_INPUT);
 420:	83 e0       	ldi	r24, 0x03	; 3
 422:	67 e0       	ldi	r22, 0x07	; 7
 424:	40 e0       	ldi	r20, 0x00	; 0
 426:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_u8_COLS_PORT, KEYPAD_u8_C2_PIN, DIO_u8_INPUT);
 42a:	83 e0       	ldi	r24, 0x03	; 3
 42c:	66 e0       	ldi	r22, 0x06	; 6
 42e:	40 e0       	ldi	r20, 0x00	; 0
 430:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_u8_COLS_PORT, KEYPAD_u8_C3_PIN, DIO_u8_INPUT);
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	65 e0       	ldi	r22, 0x05	; 5
 438:	40 e0       	ldi	r20, 0x00	; 0
 43a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(KEYPAD_u8_COLS_PORT, KEYPAD_u8_C4_PIN, DIO_u8_INPUT);
 43e:	83 e0       	ldi	r24, 0x03	; 3
 440:	63 e0       	ldi	r22, 0x03	; 3
 442:	40 e0       	ldi	r20, 0x00	; 0
 444:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>

	/*COL PINS to be input PULL UP*/
	DIO_voidSetPinValue(KEYPAD_u8_COLS_PORT, KEYPAD_u8_C1_PIN, DIO_u8_HIGH);
 448:	83 e0       	ldi	r24, 0x03	; 3
 44a:	67 e0       	ldi	r22, 0x07	; 7
 44c:	41 e0       	ldi	r20, 0x01	; 1
 44e:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_u8_COLS_PORT, KEYPAD_u8_C2_PIN, DIO_u8_HIGH);
 452:	83 e0       	ldi	r24, 0x03	; 3
 454:	66 e0       	ldi	r22, 0x06	; 6
 456:	41 e0       	ldi	r20, 0x01	; 1
 458:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_u8_COLS_PORT, KEYPAD_u8_C3_PIN, DIO_u8_HIGH);
 45c:	83 e0       	ldi	r24, 0x03	; 3
 45e:	65 e0       	ldi	r22, 0x05	; 5
 460:	41 e0       	ldi	r20, 0x01	; 1
 462:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(KEYPAD_u8_COLS_PORT, KEYPAD_u8_C4_PIN, DIO_u8_HIGH);
 466:	83 e0       	ldi	r24, 0x03	; 3
 468:	63 e0       	ldi	r22, 0x03	; 3
 46a:	41 e0       	ldi	r20, 0x01	; 1
 46c:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
}
 470:	08 95       	ret

00000472 <rev_num>:
 *
 * @param num: The positive 32-bit integer to be reversed.
 * @return The integer with its digits reversed.
 */
u32 rev_num(u32 num)
{
 472:	af 92       	push	r10
 474:	bf 92       	push	r11
 476:	cf 92       	push	r12
 478:	df 92       	push	r13
 47a:	ef 92       	push	r14
 47c:	ff 92       	push	r15
 47e:	0f 93       	push	r16
 480:	1f 93       	push	r17
 482:	5b 01       	movw	r10, r22
 484:	6c 01       	movw	r12, r24
	u32 rev = 1;

	while (num)
 486:	61 15       	cp	r22, r1
 488:	71 05       	cpc	r23, r1
 48a:	81 05       	cpc	r24, r1
 48c:	91 05       	cpc	r25, r1
 48e:	29 f4       	brne	.+10     	; 0x49a <rev_num+0x28>
 490:	ee 24       	eor	r14, r14
 492:	ff 24       	eor	r15, r15
 494:	87 01       	movw	r16, r14
 496:	e3 94       	inc	r14
 498:	29 c0       	rjmp	.+82     	; 0x4ec <rev_num+0x7a>
 49a:	ee 24       	eor	r14, r14
 49c:	ff 24       	eor	r15, r15
 49e:	87 01       	movw	r16, r14
 4a0:	e3 94       	inc	r14
	{
		rev = (rev * 10) + (num % 10);
 4a2:	c8 01       	movw	r24, r16
 4a4:	b7 01       	movw	r22, r14
 4a6:	2a e0       	ldi	r18, 0x0A	; 10
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	40 e0       	ldi	r20, 0x00	; 0
 4ac:	50 e0       	ldi	r21, 0x00	; 0
 4ae:	0e 94 9e 05 	call	0xb3c	; 0xb3c <__mulsi3>
 4b2:	7b 01       	movw	r14, r22
 4b4:	8c 01       	movw	r16, r24
 4b6:	c6 01       	movw	r24, r12
 4b8:	b5 01       	movw	r22, r10
 4ba:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 4be:	e6 0e       	add	r14, r22
 4c0:	f7 1e       	adc	r15, r23
 4c2:	08 1f       	adc	r16, r24
 4c4:	19 1f       	adc	r17, r25
		num /= 10;
 4c6:	c6 01       	movw	r24, r12
 4c8:	b5 01       	movw	r22, r10
 4ca:	2a e0       	ldi	r18, 0x0A	; 10
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	40 e0       	ldi	r20, 0x00	; 0
 4d0:	50 e0       	ldi	r21, 0x00	; 0
 4d2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 4d6:	82 2f       	mov	r24, r18
 4d8:	93 2f       	mov	r25, r19
 4da:	a4 2f       	mov	r26, r20
 4dc:	b5 2f       	mov	r27, r21
 4de:	5c 01       	movw	r10, r24
 4e0:	6d 01       	movw	r12, r26
 */
u32 rev_num(u32 num)
{
	u32 rev = 1;

	while (num)
 4e2:	a1 14       	cp	r10, r1
 4e4:	b1 04       	cpc	r11, r1
 4e6:	c1 04       	cpc	r12, r1
 4e8:	d1 04       	cpc	r13, r1
 4ea:	d9 f6       	brne	.-74     	; 0x4a2 <rev_num+0x30>
	{
		rev = (rev * 10) + (num % 10);
		num /= 10;
	}
	return rev;
}
 4ec:	6e 2d       	mov	r22, r14
 4ee:	7f 2d       	mov	r23, r15
 4f0:	80 2f       	mov	r24, r16
 4f2:	91 2f       	mov	r25, r17
 4f4:	1f 91       	pop	r17
 4f6:	0f 91       	pop	r16
 4f8:	ff 90       	pop	r15
 4fa:	ef 90       	pop	r14
 4fc:	df 90       	pop	r13
 4fe:	cf 90       	pop	r12
 500:	bf 90       	pop	r11
 502:	af 90       	pop	r10
 504:	08 95       	ret

00000506 <LCD_SendFallingEdge>:
 * LCD_SendFallingEdge - Sends a falling edge signal to the LCD module.
 *
 * Note: This function is intended for internal use within the LCD driver and
 * should not be called directly from outside the driver.
 */
static void LCD_SendFallingEdge(){
 506:	0f 93       	push	r16
 508:	1f 93       	push	r17
    
    DIO_voidSetPinValue  ( LCD_E_PORT_ID, LCD_E_PIN_ID , HIGH );
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	62 e0       	ldi	r22, 0x02	; 2
 50e:	41 e0       	ldi	r20, 0x01	; 1
 510:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
 514:	00 ea       	ldi	r16, 0xA0	; 160
 516:	1f e0       	ldi	r17, 0x0F	; 15
 518:	c8 01       	movw	r24, r16
 51a:	01 97       	sbiw	r24, 0x01	; 1
 51c:	f1 f7       	brne	.-4      	; 0x51a <LCD_SendFallingEdge+0x14>
	_delay_ms(1);
	DIO_voidSetPinValue  ( LCD_E_PORT_ID, LCD_E_PIN_ID , LOW  );
 51e:	80 e0       	ldi	r24, 0x00	; 0
 520:	62 e0       	ldi	r22, 0x02	; 2
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
 528:	c8 01       	movw	r24, r16
 52a:	01 97       	sbiw	r24, 0x01	; 1
 52c:	f1 f7       	brne	.-4      	; 0x52a <LCD_SendFallingEdge+0x24>
	_delay_ms(1);
}
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	08 95       	ret

00000534 <LCD_displayCharacter>:
 * cursor position.
 *
 * @param data: The character to be displayed on the LCD.
 */
void LCD_displayCharacter(u8 data)
{
 534:	1f 93       	push	r17
 536:	18 2f       	mov	r17, r24
	/* sending upper nibble */
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, GET_BIT(data, 7));  
 538:	48 2f       	mov	r20, r24
 53a:	44 1f       	adc	r20, r20
 53c:	44 27       	eor	r20, r20
 53e:	44 1f       	adc	r20, r20
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	64 e0       	ldi	r22, 0x04	; 4
 544:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, GET_BIT(data, 6));  
 548:	41 2f       	mov	r20, r17
 54a:	42 95       	swap	r20
 54c:	46 95       	lsr	r20
 54e:	46 95       	lsr	r20
 550:	43 70       	andi	r20, 0x03	; 3
 552:	41 70       	andi	r20, 0x01	; 1
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	62 e0       	ldi	r22, 0x02	; 2
 558:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, GET_BIT(data, 5));  
 55c:	41 2f       	mov	r20, r17
 55e:	42 95       	swap	r20
 560:	46 95       	lsr	r20
 562:	47 70       	andi	r20, 0x07	; 7
 564:	41 70       	andi	r20, 0x01	; 1
 566:	81 e0       	ldi	r24, 0x01	; 1
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, GET_BIT(data, 4));  
 56e:	41 2f       	mov	r20, r17
 570:	42 95       	swap	r20
 572:	4f 70       	andi	r20, 0x0F	; 15
 574:	41 70       	andi	r20, 0x01	; 1
 576:	81 e0       	ldi	r24, 0x01	; 1
 578:	60 e0       	ldi	r22, 0x00	; 0
 57a:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue  ( LCD_RS_PORT_ID , LCD_RS_PIN_ID , HIGH );		/* RS=1, data reg. */
 57e:	80 e0       	ldi	r24, 0x00	; 0
 580:	63 e0       	ldi	r22, 0x03	; 3
 582:	41 e0       	ldi	r20, 0x01	; 1
 584:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	LCD_SendFallingEdge();
 588:	0e 94 83 02 	call	0x506	; 0x506 <LCD_SendFallingEdge>

	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, GET_BIT(data, 3));  
 58c:	41 2f       	mov	r20, r17
 58e:	46 95       	lsr	r20
 590:	46 95       	lsr	r20
 592:	46 95       	lsr	r20
 594:	41 70       	andi	r20, 0x01	; 1
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	64 e0       	ldi	r22, 0x04	; 4
 59a:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, GET_BIT(data, 2));  
 59e:	41 2f       	mov	r20, r17
 5a0:	46 95       	lsr	r20
 5a2:	46 95       	lsr	r20
 5a4:	41 70       	andi	r20, 0x01	; 1
 5a6:	81 e0       	ldi	r24, 0x01	; 1
 5a8:	62 e0       	ldi	r22, 0x02	; 2
 5aa:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, GET_BIT(data, 1));  
 5ae:	41 2f       	mov	r20, r17
 5b0:	46 95       	lsr	r20
 5b2:	41 70       	andi	r20, 0x01	; 1
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, GET_BIT(data, 0)); 
 5bc:	11 70       	andi	r17, 0x01	; 1
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	60 e0       	ldi	r22, 0x00	; 0
 5c2:	41 2f       	mov	r20, r17
 5c4:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue  ( LCD_RS_PORT_ID , LCD_RS_PIN_ID , HIGH );		/* RS=1, data reg. */
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	63 e0       	ldi	r22, 0x03	; 3
 5cc:	41 e0       	ldi	r20, 0x01	; 1
 5ce:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	LCD_SendFallingEdge();
 5d2:	0e 94 83 02 	call	0x506	; 0x506 <LCD_SendFallingEdge>
 5d6:	80 ea       	ldi	r24, 0xA0	; 160
 5d8:	9f e0       	ldi	r25, 0x0F	; 15
 5da:	01 97       	sbiw	r24, 0x01	; 1
 5dc:	f1 f7       	brne	.-4      	; 0x5da <LCD_displayCharacter+0xa6>

	_delay_ms(1);
}
 5de:	1f 91       	pop	r17
 5e0:	08 95       	ret

000005e2 <LCD_sendNumber>:
 * displayed at the current cursor position on the LCD.
 *
 * @param num: The signed 32-bit integer to be displayed on the LCD.
 */
void LCD_sendNumber(s32 num)
{
 5e2:	ef 92       	push	r14
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
	u32 n;

	if (num == 0)
 5ea:	61 15       	cp	r22, r1
 5ec:	71 05       	cpc	r23, r1
 5ee:	81 05       	cpc	r24, r1
 5f0:	91 05       	cpc	r25, r1
 5f2:	21 f4       	brne	.+8      	; 0x5fc <LCD_sendNumber+0x1a>
	{
		LCD_displayCharacter('0');
 5f4:	80 e3       	ldi	r24, 0x30	; 48
 5f6:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_displayCharacter>
 5fa:	3b c0       	rjmp	.+118    	; 0x672 <LCD_sendNumber+0x90>
		return;
	}
	if (num < 0)
 5fc:	99 23       	and	r25, r25
 5fe:	5c f4       	brge	.+22     	; 0x616 <LCD_sendNumber+0x34>
	{
		n = -num;
 600:	ee 24       	eor	r14, r14
 602:	ff 24       	eor	r15, r15
 604:	87 01       	movw	r16, r14
 606:	e6 1a       	sub	r14, r22
 608:	f7 0a       	sbc	r15, r23
 60a:	08 0b       	sbc	r16, r24
 60c:	19 0b       	sbc	r17, r25
		LCD_displayCharacter('-');
 60e:	8d e2       	ldi	r24, 0x2D	; 45
 610:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_displayCharacter>
 614:	02 c0       	rjmp	.+4      	; 0x61a <LCD_sendNumber+0x38>
	} else
	{
		n = num;
 616:	7b 01       	movw	r14, r22
 618:	8c 01       	movw	r16, r24
	}

	n = rev_num(n);
 61a:	c8 01       	movw	r24, r16
 61c:	b7 01       	movw	r22, r14
 61e:	0e 94 39 02 	call	0x472	; 0x472 <rev_num>
 622:	7b 01       	movw	r14, r22
 624:	8c 01       	movw	r16, r24

	while ((n != 1))
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	e8 16       	cp	r14, r24
 62a:	f1 04       	cpc	r15, r1
 62c:	01 05       	cpc	r16, r1
 62e:	11 05       	cpc	r17, r1
 630:	01 f1       	breq	.+64     	; 0x672 <LCD_sendNumber+0x90>
	{
		LCD_displayCharacter('0' + (n % 10));
 632:	c8 01       	movw	r24, r16
 634:	b7 01       	movw	r22, r14
 636:	2a e0       	ldi	r18, 0x0A	; 10
 638:	30 e0       	ldi	r19, 0x00	; 0
 63a:	40 e0       	ldi	r20, 0x00	; 0
 63c:	50 e0       	ldi	r21, 0x00	; 0
 63e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 642:	86 2f       	mov	r24, r22
 644:	80 5d       	subi	r24, 0xD0	; 208
 646:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_displayCharacter>
		n /= 10;
 64a:	c8 01       	movw	r24, r16
 64c:	b7 01       	movw	r22, r14
 64e:	2a e0       	ldi	r18, 0x0A	; 10
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	40 e0       	ldi	r20, 0x00	; 0
 654:	50 e0       	ldi	r21, 0x00	; 0
 656:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__udivmodsi4>
 65a:	82 2f       	mov	r24, r18
 65c:	93 2f       	mov	r25, r19
 65e:	a4 2f       	mov	r26, r20
 660:	b5 2f       	mov	r27, r21
 662:	7c 01       	movw	r14, r24
 664:	8d 01       	movw	r16, r26
		n = num;
	}

	n = rev_num(n);

	while ((n != 1))
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	e8 16       	cp	r14, r24
 66a:	f1 04       	cpc	r15, r1
 66c:	01 05       	cpc	r16, r1
 66e:	11 05       	cpc	r17, r1
 670:	01 f7       	brne	.-64     	; 0x632 <LCD_sendNumber+0x50>
	{
		LCD_displayCharacter('0' + (n % 10));
		n /= 10;
	}
}
 672:	1f 91       	pop	r17
 674:	0f 91       	pop	r16
 676:	ff 90       	pop	r15
 678:	ef 90       	pop	r14
 67a:	08 95       	ret

0000067c <LCD_SendString>:
 *
 * @param str: Pointer to the null-terminated string to be displayed on the LCD.
 *             The string should be no longer than the width of the LCD (usually 20 characters).
 *             Note: The function will not display characters outside the 20-character width.
 */
void LCD_SendString (const char *str){
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	ec 01       	movw	r28, r24
    u8 Iterator_u8 = 0 ;

	while( str[Iterator_u8] != '\0' ){
 684:	88 81       	ld	r24, Y
 686:	88 23       	and	r24, r24
 688:	51 f0       	breq	.+20     	; 0x69e <LCD_SendString+0x22>
 68a:	10 e0       	ldi	r17, 0x00	; 0

		LCD_displayCharacter( str[Iterator_u8] );
 68c:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_displayCharacter>
		Iterator_u8++ ;
 690:	1f 5f       	subi	r17, 0xFF	; 255
 *             Note: The function will not display characters outside the 20-character width.
 */
void LCD_SendString (const char *str){
    u8 Iterator_u8 = 0 ;

	while( str[Iterator_u8] != '\0' ){
 692:	fe 01       	movw	r30, r28
 694:	e1 0f       	add	r30, r17
 696:	f1 1d       	adc	r31, r1
 698:	80 81       	ld	r24, Z
 69a:	88 23       	and	r24, r24
 69c:	b9 f7       	brne	.-18     	; 0x68c <LCD_SendString+0x10>

		LCD_displayCharacter( str[Iterator_u8] );
		Iterator_u8++ ;
	}
}
 69e:	df 91       	pop	r29
 6a0:	cf 91       	pop	r28
 6a2:	1f 91       	pop	r17
 6a4:	08 95       	ret

000006a6 <LCD_sendCommand>:
 * the cursor position, turning on/off the display, clearing the screen, etc.
 *
 * @param command: The command byte to be sent to the LCD.
 */
void LCD_sendCommand(u8 command)
{
 6a6:	1f 93       	push	r17
 6a8:	18 2f       	mov	r17, r24
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, GET_BIT(command, 7));  
 6aa:	48 2f       	mov	r20, r24
 6ac:	44 1f       	adc	r20, r20
 6ae:	44 27       	eor	r20, r20
 6b0:	44 1f       	adc	r20, r20
 6b2:	81 e0       	ldi	r24, 0x01	; 1
 6b4:	64 e0       	ldi	r22, 0x04	; 4
 6b6:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, GET_BIT(command, 6));  
 6ba:	41 2f       	mov	r20, r17
 6bc:	42 95       	swap	r20
 6be:	46 95       	lsr	r20
 6c0:	46 95       	lsr	r20
 6c2:	43 70       	andi	r20, 0x03	; 3
 6c4:	41 70       	andi	r20, 0x01	; 1
 6c6:	81 e0       	ldi	r24, 0x01	; 1
 6c8:	62 e0       	ldi	r22, 0x02	; 2
 6ca:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, GET_BIT(command, 5));  
 6ce:	41 2f       	mov	r20, r17
 6d0:	42 95       	swap	r20
 6d2:	46 95       	lsr	r20
 6d4:	47 70       	andi	r20, 0x07	; 7
 6d6:	41 70       	andi	r20, 0x01	; 1
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	61 e0       	ldi	r22, 0x01	; 1
 6dc:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, GET_BIT(command, 4));  
 6e0:	41 2f       	mov	r20, r17
 6e2:	42 95       	swap	r20
 6e4:	4f 70       	andi	r20, 0x0F	; 15
 6e6:	41 70       	andi	r20, 0x01	; 1
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	60 e0       	ldi	r22, 0x00	; 0
 6ec:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue  ( LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOW );		/* RS=1, data reg. */
 6f0:	80 e0       	ldi	r24, 0x00	; 0
 6f2:	63 e0       	ldi	r22, 0x03	; 3
 6f4:	40 e0       	ldi	r20, 0x00	; 0
 6f6:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	LCD_SendFallingEdge();
 6fa:	0e 94 83 02 	call	0x506	; 0x506 <LCD_SendFallingEdge>

	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN4, GET_BIT(command, 3));  
 6fe:	41 2f       	mov	r20, r17
 700:	46 95       	lsr	r20
 702:	46 95       	lsr	r20
 704:	46 95       	lsr	r20
 706:	41 70       	andi	r20, 0x01	; 1
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	64 e0       	ldi	r22, 0x04	; 4
 70c:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN2, GET_BIT(command, 2));  
 710:	41 2f       	mov	r20, r17
 712:	46 95       	lsr	r20
 714:	46 95       	lsr	r20
 716:	41 70       	andi	r20, 0x01	; 1
 718:	81 e0       	ldi	r24, 0x01	; 1
 71a:	62 e0       	ldi	r22, 0x02	; 2
 71c:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN1, GET_BIT(command, 1));  
 720:	41 2f       	mov	r20, r17
 722:	46 95       	lsr	r20
 724:	41 70       	andi	r20, 0x01	; 1
 726:	81 e0       	ldi	r24, 0x01	; 1
 728:	61 e0       	ldi	r22, 0x01	; 1
 72a:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DIO_u8_PORTB, DIO_u8_PIN0, GET_BIT(command, 0)); 
 72e:	11 70       	andi	r17, 0x01	; 1
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	41 2f       	mov	r20, r17
 736:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	DIO_voidSetPinValue  ( LCD_RS_PORT_ID , LCD_RS_PIN_ID , LOW );		/* RS=1, data reg. */
 73a:	80 e0       	ldi	r24, 0x00	; 0
 73c:	63 e0       	ldi	r22, 0x03	; 3
 73e:	40 e0       	ldi	r20, 0x00	; 0
 740:	0e 94 43 04 	call	0x886	; 0x886 <DIO_voidSetPinValue>
	LCD_SendFallingEdge();
 744:	0e 94 83 02 	call	0x506	; 0x506 <LCD_SendFallingEdge>
 748:	80 ea       	ldi	r24, 0xA0	; 160
 74a:	9f e0       	ldi	r25, 0x0F	; 15
 74c:	01 97       	sbiw	r24, 0x01	; 1
 74e:	f1 f7       	brne	.-4      	; 0x74c <LCD_sendCommand+0xa6>

	_delay_ms(1); /* delay for processing Th = 13ns */

}
 750:	1f 91       	pop	r17
 752:	08 95       	ret

00000754 <LCD_clearScreen>:
 * characters and cursor positions. After calling this function, the LCD will
 * be completely blank.
 */
void LCD_clearScreen(void)
{
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
}
 75a:	08 95       	ret

0000075c <LCD_moveCursor>:
void LCD_moveCursor(u8 row_u8,u8 pos_u8)
{
	if (row_u8 < 0 || pos_u8 < 0)
		return;
	
	if (row_u8 == 0 && pos_u8<20)
 75c:	88 23       	and	r24, r24
 75e:	39 f4       	brne	.+14     	; 0x76e <LCD_moveCursor+0x12>
 760:	64 31       	cpi	r22, 0x14	; 20
 762:	f8 f4       	brcc	.+62     	; 0x7a2 <LCD_moveCursor+0x46>
		LCD_sendCommand((pos_u8 + 0x80));	/* Command of first row and required position<20 */
 764:	86 2f       	mov	r24, r22
 766:	80 58       	subi	r24, 0x80	; 128
 768:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
 76c:	08 95       	ret
	else if (row_u8 == 1 && pos_u8<20)
 76e:	81 30       	cpi	r24, 0x01	; 1
 770:	39 f4       	brne	.+14     	; 0x780 <LCD_moveCursor+0x24>
 772:	64 31       	cpi	r22, 0x14	; 20
 774:	b0 f4       	brcc	.+44     	; 0x7a2 <LCD_moveCursor+0x46>
		LCD_sendCommand((pos_u8 + 0xC0));	/* Command of first row and required position<20 */
 776:	86 2f       	mov	r24, r22
 778:	80 54       	subi	r24, 0x40	; 64
 77a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
 77e:	08 95       	ret
	else if (row_u8 == 2 && pos_u8<20)
 780:	82 30       	cpi	r24, 0x02	; 2
 782:	39 f4       	brne	.+14     	; 0x792 <LCD_moveCursor+0x36>
 784:	64 31       	cpi	r22, 0x14	; 20
 786:	68 f4       	brcc	.+26     	; 0x7a2 <LCD_moveCursor+0x46>
		LCD_sendCommand((pos_u8 + 0x94));	/* Command of first row and required position<20 */
 788:	86 2f       	mov	r24, r22
 78a:	8c 56       	subi	r24, 0x6C	; 108
 78c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
 790:	08 95       	ret
	else if (row_u8 == 3 && pos_u8<20)
 792:	83 30       	cpi	r24, 0x03	; 3
 794:	31 f4       	brne	.+12     	; 0x7a2 <LCD_moveCursor+0x46>
 796:	64 31       	cpi	r22, 0x14	; 20
 798:	20 f4       	brcc	.+8      	; 0x7a2 <LCD_moveCursor+0x46>
		LCD_sendCommand((pos_u8 + 0xD4));	/* Command of first row and required position<20 */
 79a:	86 2f       	mov	r24, r22
 79c:	8c 52       	subi	r24, 0x2C	; 44
 79e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
 7a2:	08 95       	ret

000007a4 <LCD_displayString_XY>:
 * @param str: Pointer to the null-terminated string to be displayed on the LCD.
 *             The string should be no longer than the width of the LCD (usually 20 characters).
 *             Note: The function will not display characters outside the 20-character width.
 */
void LCD_displayString_XY(u8 row_u8, u8 pos_u8, const char *str)
{
 7a4:	cf 93       	push	r28
 7a6:	df 93       	push	r29
 7a8:	ea 01       	movw	r28, r20
	if (row_u8 < 0 || pos_u8 < 0)
		return;
	/*send char to location XY*/
	if (row_u8 == 0 && pos_u8<20)
 7aa:	88 23       	and	r24, r24
 7ac:	39 f4       	brne	.+14     	; 0x7bc <LCD_displayString_XY+0x18>
 7ae:	64 31       	cpi	r22, 0x14	; 20
 7b0:	f8 f4       	brcc	.+62     	; 0x7f0 <LCD_displayString_XY+0x4c>
		LCD_sendCommand(pos_u8 + 0x80);	/* Command of first row and required position<20 */
 7b2:	86 2f       	mov	r24, r22
 7b4:	80 58       	subi	r24, 0x80	; 128
 7b6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
 7ba:	1a c0       	rjmp	.+52     	; 0x7f0 <LCD_displayString_XY+0x4c>
	else if (row_u8 == 1 && pos_u8<20)
 7bc:	81 30       	cpi	r24, 0x01	; 1
 7be:	39 f4       	brne	.+14     	; 0x7ce <LCD_displayString_XY+0x2a>
 7c0:	64 31       	cpi	r22, 0x14	; 20
 7c2:	b0 f4       	brcc	.+44     	; 0x7f0 <LCD_displayString_XY+0x4c>
		LCD_sendCommand(pos_u8 + 0xC0);	/* Command of first row and required position<20 */
 7c4:	86 2f       	mov	r24, r22
 7c6:	80 54       	subi	r24, 0x40	; 64
 7c8:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
 7cc:	11 c0       	rjmp	.+34     	; 0x7f0 <LCD_displayString_XY+0x4c>
	else if (row_u8 == 2 && pos_u8<20)
 7ce:	82 30       	cpi	r24, 0x02	; 2
 7d0:	39 f4       	brne	.+14     	; 0x7e0 <LCD_displayString_XY+0x3c>
 7d2:	64 31       	cpi	r22, 0x14	; 20
 7d4:	68 f4       	brcc	.+26     	; 0x7f0 <LCD_displayString_XY+0x4c>
		LCD_sendCommand(pos_u8 + 0x94);	/* Command of first row and required position<20 */
 7d6:	86 2f       	mov	r24, r22
 7d8:	8c 56       	subi	r24, 0x6C	; 108
 7da:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
 7de:	08 c0       	rjmp	.+16     	; 0x7f0 <LCD_displayString_XY+0x4c>
	else if (row_u8 == 3 && pos_u8<20)
 7e0:	83 30       	cpi	r24, 0x03	; 3
 7e2:	31 f4       	brne	.+12     	; 0x7f0 <LCD_displayString_XY+0x4c>
 7e4:	64 31       	cpi	r22, 0x14	; 20
 7e6:	20 f4       	brcc	.+8      	; 0x7f0 <LCD_displayString_XY+0x4c>
		LCD_sendCommand(pos_u8 + 0xD4);	/* Command of first row and required position<20 */
 7e8:	86 2f       	mov	r24, r22
 7ea:	8c 52       	subi	r24, 0x2C	; 44
 7ec:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
	LCD_SendString(str);		/* Call LCD string function */
 7f0:	ce 01       	movw	r24, r28
 7f2:	0e 94 3e 03 	call	0x67c	; 0x67c <LCD_SendString>
}
 7f6:	df 91       	pop	r29
 7f8:	cf 91       	pop	r28
 7fa:	08 95       	ret

000007fc <LCD_init>:
 * using the _delay_ms() function or equivalent.
 */
void LCD_init(void)
{
	/* Configure the direction for RS and E pins as output pins */
	DIO_voidSetPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,DIO_u8_OUTPUT);
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	63 e0       	ldi	r22, 0x03	; 3
 800:	41 e0       	ldi	r20, 0x01	; 1
 802:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,DIO_u8_OUTPUT);
 806:	80 e0       	ldi	r24, 0x00	; 0
 808:	62 e0       	ldi	r22, 0x02	; 2
 80a:	41 e0       	ldi	r20, 0x01	; 1
 80c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
 810:	28 ec       	ldi	r18, 0xC8	; 200
 812:	30 e0       	ldi	r19, 0x00	; 0
 814:	40 e9       	ldi	r20, 0x90	; 144
 816:	51 e0       	ldi	r21, 0x01	; 1
 818:	ca 01       	movw	r24, r20
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	f1 f7       	brne	.-4      	; 0x81a <LCD_init+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 81e:	21 50       	subi	r18, 0x01	; 1
 820:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 822:	d1 f7       	brne	.-12     	; 0x818 <LCD_init+0x1c>

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */


	/* Configure 4 pins in the data port as output pins */
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID, LCD_DB4_PIN_ID, DIO_u8_OUTPUT);
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	60 e0       	ldi	r22, 0x00	; 0
 828:	41 e0       	ldi	r20, 0x01	; 1
 82a:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID, LCD_DB5_PIN_ID, DIO_u8_OUTPUT);
 82e:	81 e0       	ldi	r24, 0x01	; 1
 830:	61 e0       	ldi	r22, 0x01	; 1
 832:	41 e0       	ldi	r20, 0x01	; 1
 834:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID, LCD_DB6_PIN_ID, DIO_u8_OUTPUT);
 838:	81 e0       	ldi	r24, 0x01	; 1
 83a:	62 e0       	ldi	r22, 0x02	; 2
 83c:	41 e0       	ldi	r20, 0x01	; 1
 83e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_DATA_PORT_ID, LCD_DB7_PIN_ID, DIO_u8_OUTPUT);
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	64 e0       	ldi	r22, 0x04	; 4
 846:	41 e0       	ldi	r20, 0x01	; 1
 848:	0e 94 d7 04 	call	0x9ae	; 0x9ae <DIO_voidSetPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
 84c:	83 e3       	ldi	r24, 0x33	; 51
 84e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
 852:	82 e3       	ldi	r24, 0x32	; 50
 854:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
 858:	88 e2       	ldi	r24, 0x28	; 40
 85a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>


	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
 85e:	8c e0       	ldi	r24, 0x0C	; 12
 860:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	0e 94 53 03 	call	0x6a6	; 0x6a6 <LCD_sendCommand>

}
 86a:	08 95       	ret

0000086c <ADC_init>:
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	DDRA &= ~(1<<0); //make A0 input
 86c:	ea e3       	ldi	r30, 0x3A	; 58
 86e:	f0 e0       	ldi	r31, 0x00	; 0
 870:	80 81       	ld	r24, Z
 872:	8e 7f       	andi	r24, 0xFE	; 254
 874:	80 83       	st	Z, r24
	DDRA &= ~(1<<1); //make A1 input
 876:	80 81       	ld	r24, Z
 878:	8d 7f       	andi	r24, 0xFD	; 253
 87a:	80 83       	st	Z, r24
	ADMUX = (1<<ADMUX_REFS0); // AREF=AVCC
 87c:	80 e4       	ldi	r24, 0x40	; 64
 87e:	87 b9       	out	0x07, r24	; 7
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0); //enable adc + PRrescalar div factor =128
 880:	87 e8       	ldi	r24, 0x87	; 135
 882:	86 b9       	out	0x06, r24	; 6
}
 884:	08 95       	ret

00000886 <DIO_voidSetPinValue>:
 * @return None.
 */
void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
 886:	84 30       	cpi	r24, 0x04	; 4
 888:	08 f0       	brcs	.+2      	; 0x88c <DIO_voidSetPinValue+0x6>
 88a:	90 c0       	rjmp	.+288    	; 0x9ac <DIO_voidSetPinValue+0x126>
 88c:	68 30       	cpi	r22, 0x08	; 8
 88e:	08 f0       	brcs	.+2      	; 0x892 <DIO_voidSetPinValue+0xc>
 890:	8d c0       	rjmp	.+282    	; 0x9ac <DIO_voidSetPinValue+0x126>
    {
        switch(Copy_u8PortId)   
 892:	81 30       	cpi	r24, 0x01	; 1
 894:	51 f1       	breq	.+84     	; 0x8ea <DIO_voidSetPinValue+0x64>
 896:	81 30       	cpi	r24, 0x01	; 1
 898:	38 f0       	brcs	.+14     	; 0x8a8 <DIO_voidSetPinValue+0x22>
 89a:	82 30       	cpi	r24, 0x02	; 2
 89c:	09 f4       	brne	.+2      	; 0x8a0 <DIO_voidSetPinValue+0x1a>
 89e:	46 c0       	rjmp	.+140    	; 0x92c <DIO_voidSetPinValue+0xa6>
 8a0:	83 30       	cpi	r24, 0x03	; 3
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <DIO_voidSetPinValue+0x20>
 8a4:	83 c0       	rjmp	.+262    	; 0x9ac <DIO_voidSetPinValue+0x126>
 8a6:	63 c0       	rjmp	.+198    	; 0x96e <DIO_voidSetPinValue+0xe8>
        {
            case DIO_u8_PORTA:  switch(Copy_u8Value)    
 8a8:	44 23       	and	r20, r20
 8aa:	21 f0       	breq	.+8      	; 0x8b4 <DIO_voidSetPinValue+0x2e>
 8ac:	41 30       	cpi	r20, 0x01	; 1
 8ae:	09 f0       	breq	.+2      	; 0x8b2 <DIO_voidSetPinValue+0x2c>
 8b0:	7d c0       	rjmp	.+250    	; 0x9ac <DIO_voidSetPinValue+0x126>
 8b2:	0e c0       	rjmp	.+28     	; 0x8d0 <DIO_voidSetPinValue+0x4a>
                                {
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;  
 8b4:	eb e3       	ldi	r30, 0x3B	; 59
 8b6:	f0 e0       	ldi	r31, 0x00	; 0
 8b8:	20 81       	ld	r18, Z
 8ba:	81 e0       	ldi	r24, 0x01	; 1
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	02 c0       	rjmp	.+4      	; 0x8c4 <DIO_voidSetPinValue+0x3e>
 8c0:	88 0f       	add	r24, r24
 8c2:	99 1f       	adc	r25, r25
 8c4:	6a 95       	dec	r22
 8c6:	e2 f7       	brpl	.-8      	; 0x8c0 <DIO_voidSetPinValue+0x3a>
 8c8:	80 95       	com	r24
 8ca:	82 23       	and	r24, r18
 8cc:	80 83       	st	Z, r24
 8ce:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;   
 8d0:	eb e3       	ldi	r30, 0x3B	; 59
 8d2:	f0 e0       	ldi	r31, 0x00	; 0
 8d4:	20 81       	ld	r18, Z
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	90 e0       	ldi	r25, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <DIO_voidSetPinValue+0x5a>
 8dc:	88 0f       	add	r24, r24
 8de:	99 1f       	adc	r25, r25
 8e0:	6a 95       	dec	r22
 8e2:	e2 f7       	brpl	.-8      	; 0x8dc <DIO_voidSetPinValue+0x56>
 8e4:	28 2b       	or	r18, r24
 8e6:	20 83       	st	Z, r18
 8e8:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTB:  switch(Copy_u8Value)
 8ea:	44 23       	and	r20, r20
 8ec:	21 f0       	breq	.+8      	; 0x8f6 <DIO_voidSetPinValue+0x70>
 8ee:	41 30       	cpi	r20, 0x01	; 1
 8f0:	09 f0       	breq	.+2      	; 0x8f4 <DIO_voidSetPinValue+0x6e>
 8f2:	5c c0       	rjmp	.+184    	; 0x9ac <DIO_voidSetPinValue+0x126>
 8f4:	0e c0       	rjmp	.+28     	; 0x912 <DIO_voidSetPinValue+0x8c>
                                {       
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
 8f6:	e8 e3       	ldi	r30, 0x38	; 56
 8f8:	f0 e0       	ldi	r31, 0x00	; 0
 8fa:	20 81       	ld	r18, Z
 8fc:	81 e0       	ldi	r24, 0x01	; 1
 8fe:	90 e0       	ldi	r25, 0x00	; 0
 900:	02 c0       	rjmp	.+4      	; 0x906 <DIO_voidSetPinValue+0x80>
 902:	88 0f       	add	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	6a 95       	dec	r22
 908:	e2 f7       	brpl	.-8      	; 0x902 <DIO_voidSetPinValue+0x7c>
 90a:	80 95       	com	r24
 90c:	82 23       	and	r24, r18
 90e:	80 83       	st	Z, r24
 910:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
 912:	e8 e3       	ldi	r30, 0x38	; 56
 914:	f0 e0       	ldi	r31, 0x00	; 0
 916:	20 81       	ld	r18, Z
 918:	81 e0       	ldi	r24, 0x01	; 1
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	02 c0       	rjmp	.+4      	; 0x922 <DIO_voidSetPinValue+0x9c>
 91e:	88 0f       	add	r24, r24
 920:	99 1f       	adc	r25, r25
 922:	6a 95       	dec	r22
 924:	e2 f7       	brpl	.-8      	; 0x91e <DIO_voidSetPinValue+0x98>
 926:	28 2b       	or	r18, r24
 928:	20 83       	st	Z, r18
 92a:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTC:  switch(Copy_u8Value)
 92c:	44 23       	and	r20, r20
 92e:	21 f0       	breq	.+8      	; 0x938 <DIO_voidSetPinValue+0xb2>
 930:	41 30       	cpi	r20, 0x01	; 1
 932:	09 f0       	breq	.+2      	; 0x936 <DIO_voidSetPinValue+0xb0>
 934:	3b c0       	rjmp	.+118    	; 0x9ac <DIO_voidSetPinValue+0x126>
 936:	0e c0       	rjmp	.+28     	; 0x954 <DIO_voidSetPinValue+0xce>
                                {
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
 938:	e5 e3       	ldi	r30, 0x35	; 53
 93a:	f0 e0       	ldi	r31, 0x00	; 0
 93c:	20 81       	ld	r18, Z
 93e:	81 e0       	ldi	r24, 0x01	; 1
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	02 c0       	rjmp	.+4      	; 0x948 <DIO_voidSetPinValue+0xc2>
 944:	88 0f       	add	r24, r24
 946:	99 1f       	adc	r25, r25
 948:	6a 95       	dec	r22
 94a:	e2 f7       	brpl	.-8      	; 0x944 <DIO_voidSetPinValue+0xbe>
 94c:	80 95       	com	r24
 94e:	82 23       	and	r24, r18
 950:	80 83       	st	Z, r24
 952:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
 954:	e5 e3       	ldi	r30, 0x35	; 53
 956:	f0 e0       	ldi	r31, 0x00	; 0
 958:	20 81       	ld	r18, Z
 95a:	81 e0       	ldi	r24, 0x01	; 1
 95c:	90 e0       	ldi	r25, 0x00	; 0
 95e:	02 c0       	rjmp	.+4      	; 0x964 <DIO_voidSetPinValue+0xde>
 960:	88 0f       	add	r24, r24
 962:	99 1f       	adc	r25, r25
 964:	6a 95       	dec	r22
 966:	e2 f7       	brpl	.-8      	; 0x960 <DIO_voidSetPinValue+0xda>
 968:	28 2b       	or	r18, r24
 96a:	20 83       	st	Z, r18
 96c:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTD:  switch(Copy_u8Value)
 96e:	44 23       	and	r20, r20
 970:	19 f0       	breq	.+6      	; 0x978 <DIO_voidSetPinValue+0xf2>
 972:	41 30       	cpi	r20, 0x01	; 1
 974:	d9 f4       	brne	.+54     	; 0x9ac <DIO_voidSetPinValue+0x126>
 976:	0e c0       	rjmp	.+28     	; 0x994 <DIO_voidSetPinValue+0x10e>
                                {
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
 978:	e2 e3       	ldi	r30, 0x32	; 50
 97a:	f0 e0       	ldi	r31, 0x00	; 0
 97c:	20 81       	ld	r18, Z
 97e:	81 e0       	ldi	r24, 0x01	; 1
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	02 c0       	rjmp	.+4      	; 0x988 <DIO_voidSetPinValue+0x102>
 984:	88 0f       	add	r24, r24
 986:	99 1f       	adc	r25, r25
 988:	6a 95       	dec	r22
 98a:	e2 f7       	brpl	.-8      	; 0x984 <DIO_voidSetPinValue+0xfe>
 98c:	80 95       	com	r24
 98e:	82 23       	and	r24, r18
 990:	80 83       	st	Z, r24
 992:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
 994:	e2 e3       	ldi	r30, 0x32	; 50
 996:	f0 e0       	ldi	r31, 0x00	; 0
 998:	20 81       	ld	r18, Z
 99a:	81 e0       	ldi	r24, 0x01	; 1
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	02 c0       	rjmp	.+4      	; 0x9a4 <DIO_voidSetPinValue+0x11e>
 9a0:	88 0f       	add	r24, r24
 9a2:	99 1f       	adc	r25, r25
 9a4:	6a 95       	dec	r22
 9a6:	e2 f7       	brpl	.-8      	; 0x9a0 <DIO_voidSetPinValue+0x11a>
 9a8:	28 2b       	or	r18, r24
 9aa:	20 83       	st	Z, r18
 9ac:	08 95       	ret

000009ae <DIO_voidSetPinDirection>:
 * @return None.
 */
void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Direction)
{
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
 9ae:	84 30       	cpi	r24, 0x04	; 4
 9b0:	08 f0       	brcs	.+2      	; 0x9b4 <DIO_voidSetPinDirection+0x6>
 9b2:	90 c0       	rjmp	.+288    	; 0xad4 <DIO_voidSetPinDirection+0x126>
 9b4:	68 30       	cpi	r22, 0x08	; 8
 9b6:	08 f0       	brcs	.+2      	; 0x9ba <DIO_voidSetPinDirection+0xc>
 9b8:	8d c0       	rjmp	.+282    	; 0xad4 <DIO_voidSetPinDirection+0x126>
    {
        switch(Copy_u8PortId)   
 9ba:	81 30       	cpi	r24, 0x01	; 1
 9bc:	51 f1       	breq	.+84     	; 0xa12 <DIO_voidSetPinDirection+0x64>
 9be:	81 30       	cpi	r24, 0x01	; 1
 9c0:	38 f0       	brcs	.+14     	; 0x9d0 <DIO_voidSetPinDirection+0x22>
 9c2:	82 30       	cpi	r24, 0x02	; 2
 9c4:	09 f4       	brne	.+2      	; 0x9c8 <DIO_voidSetPinDirection+0x1a>
 9c6:	46 c0       	rjmp	.+140    	; 0xa54 <DIO_voidSetPinDirection+0xa6>
 9c8:	83 30       	cpi	r24, 0x03	; 3
 9ca:	09 f0       	breq	.+2      	; 0x9ce <DIO_voidSetPinDirection+0x20>
 9cc:	83 c0       	rjmp	.+262    	; 0xad4 <DIO_voidSetPinDirection+0x126>
 9ce:	63 c0       	rjmp	.+198    	; 0xa96 <DIO_voidSetPinDirection+0xe8>
        {
            case DIO_u8_PORTA:  switch(Copy_u8Direction)    
 9d0:	44 23       	and	r20, r20
 9d2:	21 f0       	breq	.+8      	; 0x9dc <DIO_voidSetPinDirection+0x2e>
 9d4:	41 30       	cpi	r20, 0x01	; 1
 9d6:	09 f0       	breq	.+2      	; 0x9da <DIO_voidSetPinDirection+0x2c>
 9d8:	7d c0       	rjmp	.+250    	; 0xad4 <DIO_voidSetPinDirection+0x126>
 9da:	0e c0       	rjmp	.+28     	; 0x9f8 <DIO_voidSetPinDirection+0x4a>
                                {
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;  
 9dc:	ea e3       	ldi	r30, 0x3A	; 58
 9de:	f0 e0       	ldi	r31, 0x00	; 0
 9e0:	20 81       	ld	r18, Z
 9e2:	81 e0       	ldi	r24, 0x01	; 1
 9e4:	90 e0       	ldi	r25, 0x00	; 0
 9e6:	02 c0       	rjmp	.+4      	; 0x9ec <DIO_voidSetPinDirection+0x3e>
 9e8:	88 0f       	add	r24, r24
 9ea:	99 1f       	adc	r25, r25
 9ec:	6a 95       	dec	r22
 9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <DIO_voidSetPinDirection+0x3a>
 9f0:	80 95       	com	r24
 9f2:	82 23       	and	r24, r18
 9f4:	80 83       	st	Z, r24
 9f6:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;   
 9f8:	ea e3       	ldi	r30, 0x3A	; 58
 9fa:	f0 e0       	ldi	r31, 0x00	; 0
 9fc:	20 81       	ld	r18, Z
 9fe:	81 e0       	ldi	r24, 0x01	; 1
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	02 c0       	rjmp	.+4      	; 0xa08 <DIO_voidSetPinDirection+0x5a>
 a04:	88 0f       	add	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	6a 95       	dec	r22
 a0a:	e2 f7       	brpl	.-8      	; 0xa04 <DIO_voidSetPinDirection+0x56>
 a0c:	28 2b       	or	r18, r24
 a0e:	20 83       	st	Z, r18
 a10:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTB:  switch(Copy_u8Direction)
 a12:	44 23       	and	r20, r20
 a14:	21 f0       	breq	.+8      	; 0xa1e <DIO_voidSetPinDirection+0x70>
 a16:	41 30       	cpi	r20, 0x01	; 1
 a18:	09 f0       	breq	.+2      	; 0xa1c <DIO_voidSetPinDirection+0x6e>
 a1a:	5c c0       	rjmp	.+184    	; 0xad4 <DIO_voidSetPinDirection+0x126>
 a1c:	0e c0       	rjmp	.+28     	; 0xa3a <DIO_voidSetPinDirection+0x8c>
                                {       
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 a1e:	e7 e3       	ldi	r30, 0x37	; 55
 a20:	f0 e0       	ldi	r31, 0x00	; 0
 a22:	20 81       	ld	r18, Z
 a24:	81 e0       	ldi	r24, 0x01	; 1
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <DIO_voidSetPinDirection+0x80>
 a2a:	88 0f       	add	r24, r24
 a2c:	99 1f       	adc	r25, r25
 a2e:	6a 95       	dec	r22
 a30:	e2 f7       	brpl	.-8      	; 0xa2a <DIO_voidSetPinDirection+0x7c>
 a32:	80 95       	com	r24
 a34:	82 23       	and	r24, r18
 a36:	80 83       	st	Z, r24
 a38:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 a3a:	e7 e3       	ldi	r30, 0x37	; 55
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	20 81       	ld	r18, Z
 a40:	81 e0       	ldi	r24, 0x01	; 1
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	02 c0       	rjmp	.+4      	; 0xa4a <DIO_voidSetPinDirection+0x9c>
 a46:	88 0f       	add	r24, r24
 a48:	99 1f       	adc	r25, r25
 a4a:	6a 95       	dec	r22
 a4c:	e2 f7       	brpl	.-8      	; 0xa46 <DIO_voidSetPinDirection+0x98>
 a4e:	28 2b       	or	r18, r24
 a50:	20 83       	st	Z, r18
 a52:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTC:  switch(Copy_u8Direction)
 a54:	44 23       	and	r20, r20
 a56:	21 f0       	breq	.+8      	; 0xa60 <DIO_voidSetPinDirection+0xb2>
 a58:	41 30       	cpi	r20, 0x01	; 1
 a5a:	09 f0       	breq	.+2      	; 0xa5e <DIO_voidSetPinDirection+0xb0>
 a5c:	3b c0       	rjmp	.+118    	; 0xad4 <DIO_voidSetPinDirection+0x126>
 a5e:	0e c0       	rjmp	.+28     	; 0xa7c <DIO_voidSetPinDirection+0xce>
                                {
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 a60:	e4 e3       	ldi	r30, 0x34	; 52
 a62:	f0 e0       	ldi	r31, 0x00	; 0
 a64:	20 81       	ld	r18, Z
 a66:	81 e0       	ldi	r24, 0x01	; 1
 a68:	90 e0       	ldi	r25, 0x00	; 0
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <DIO_voidSetPinDirection+0xc2>
 a6c:	88 0f       	add	r24, r24
 a6e:	99 1f       	adc	r25, r25
 a70:	6a 95       	dec	r22
 a72:	e2 f7       	brpl	.-8      	; 0xa6c <DIO_voidSetPinDirection+0xbe>
 a74:	80 95       	com	r24
 a76:	82 23       	and	r24, r18
 a78:	80 83       	st	Z, r24
 a7a:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 a7c:	e4 e3       	ldi	r30, 0x34	; 52
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	20 81       	ld	r18, Z
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	90 e0       	ldi	r25, 0x00	; 0
 a86:	02 c0       	rjmp	.+4      	; 0xa8c <DIO_voidSetPinDirection+0xde>
 a88:	88 0f       	add	r24, r24
 a8a:	99 1f       	adc	r25, r25
 a8c:	6a 95       	dec	r22
 a8e:	e2 f7       	brpl	.-8      	; 0xa88 <DIO_voidSetPinDirection+0xda>
 a90:	28 2b       	or	r18, r24
 a92:	20 83       	st	Z, r18
 a94:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTD:  switch(Copy_u8Direction)
 a96:	44 23       	and	r20, r20
 a98:	19 f0       	breq	.+6      	; 0xaa0 <DIO_voidSetPinDirection+0xf2>
 a9a:	41 30       	cpi	r20, 0x01	; 1
 a9c:	d9 f4       	brne	.+54     	; 0xad4 <DIO_voidSetPinDirection+0x126>
 a9e:	0e c0       	rjmp	.+28     	; 0xabc <DIO_voidSetPinDirection+0x10e>
                                {
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 aa0:	e1 e3       	ldi	r30, 0x31	; 49
 aa2:	f0 e0       	ldi	r31, 0x00	; 0
 aa4:	20 81       	ld	r18, Z
 aa6:	81 e0       	ldi	r24, 0x01	; 1
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_voidSetPinDirection+0x102>
 aac:	88 0f       	add	r24, r24
 aae:	99 1f       	adc	r25, r25
 ab0:	6a 95       	dec	r22
 ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_voidSetPinDirection+0xfe>
 ab4:	80 95       	com	r24
 ab6:	82 23       	and	r24, r18
 ab8:	80 83       	st	Z, r24
 aba:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 abc:	e1 e3       	ldi	r30, 0x31	; 49
 abe:	f0 e0       	ldi	r31, 0x00	; 0
 ac0:	20 81       	ld	r18, Z
 ac2:	81 e0       	ldi	r24, 0x01	; 1
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	02 c0       	rjmp	.+4      	; 0xacc <DIO_voidSetPinDirection+0x11e>
 ac8:	88 0f       	add	r24, r24
 aca:	99 1f       	adc	r25, r25
 acc:	6a 95       	dec	r22
 ace:	e2 f7       	brpl	.-8      	; 0xac8 <DIO_voidSetPinDirection+0x11a>
 ad0:	28 2b       	or	r18, r24
 ad2:	20 83       	st	Z, r18
 ad4:	08 95       	ret

00000ad6 <DIO_voidGetPinValue>:
u8 DIO_voidGetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    
    u8 Local_u8PinValue = 5;
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
 ad6:	84 30       	cpi	r24, 0x04	; 4
 ad8:	78 f5       	brcc	.+94     	; 0xb38 <DIO_voidGetPinValue+0x62>
 ada:	68 30       	cpi	r22, 0x08	; 8
 adc:	68 f5       	brcc	.+90     	; 0xb38 <DIO_voidGetPinValue+0x62>
    {
        switch(Copy_u8PortId)   
 ade:	81 30       	cpi	r24, 0x01	; 1
 ae0:	81 f0       	breq	.+32     	; 0xb02 <DIO_voidGetPinValue+0x2c>
 ae2:	81 30       	cpi	r24, 0x01	; 1
 ae4:	28 f0       	brcs	.+10     	; 0xaf0 <DIO_voidGetPinValue+0x1a>
 ae6:	82 30       	cpi	r24, 0x02	; 2
 ae8:	a9 f0       	breq	.+42     	; 0xb14 <DIO_voidGetPinValue+0x3e>
 aea:	83 30       	cpi	r24, 0x03	; 3
 aec:	29 f5       	brne	.+74     	; 0xb38 <DIO_voidGetPinValue+0x62>
 aee:	1b c0       	rjmp	.+54     	; 0xb26 <DIO_voidGetPinValue+0x50>
        {
            case DIO_u8_PORTA:  Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);  break;   
 af0:	89 b3       	in	r24, 0x19	; 25
 af2:	90 e0       	ldi	r25, 0x00	; 0
 af4:	02 c0       	rjmp	.+4      	; 0xafa <DIO_voidGetPinValue+0x24>
 af6:	95 95       	asr	r25
 af8:	87 95       	ror	r24
 afa:	6a 95       	dec	r22
 afc:	e2 f7       	brpl	.-8      	; 0xaf6 <DIO_voidGetPinValue+0x20>
 afe:	81 70       	andi	r24, 0x01	; 1
 b00:	08 95       	ret
            case DIO_u8_PORTB:  Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);  break;
 b02:	86 b3       	in	r24, 0x16	; 22
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <DIO_voidGetPinValue+0x36>
 b08:	95 95       	asr	r25
 b0a:	87 95       	ror	r24
 b0c:	6a 95       	dec	r22
 b0e:	e2 f7       	brpl	.-8      	; 0xb08 <DIO_voidGetPinValue+0x32>
 b10:	81 70       	andi	r24, 0x01	; 1
 b12:	08 95       	ret
            case DIO_u8_PORTC:  Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);  break;
 b14:	83 b3       	in	r24, 0x13	; 19
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <DIO_voidGetPinValue+0x48>
 b1a:	95 95       	asr	r25
 b1c:	87 95       	ror	r24
 b1e:	6a 95       	dec	r22
 b20:	e2 f7       	brpl	.-8      	; 0xb1a <DIO_voidGetPinValue+0x44>
 b22:	81 70       	andi	r24, 0x01	; 1
 b24:	08 95       	ret
            case DIO_u8_PORTD:  Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);  break;
 b26:	80 b3       	in	r24, 0x10	; 16
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	02 c0       	rjmp	.+4      	; 0xb30 <DIO_voidGetPinValue+0x5a>
 b2c:	95 95       	asr	r25
 b2e:	87 95       	ror	r24
 b30:	6a 95       	dec	r22
 b32:	e2 f7       	brpl	.-8      	; 0xb2c <DIO_voidGetPinValue+0x56>
 b34:	81 70       	andi	r24, 0x01	; 1
 b36:	08 95       	ret
 b38:	85 e0       	ldi	r24, 0x05	; 5
    else
    {
        
    }
    return Local_u8PinValue;    
}
 b3a:	08 95       	ret

00000b3c <__mulsi3>:
 b3c:	62 9f       	mul	r22, r18
 b3e:	d0 01       	movw	r26, r0
 b40:	73 9f       	mul	r23, r19
 b42:	f0 01       	movw	r30, r0
 b44:	82 9f       	mul	r24, r18
 b46:	e0 0d       	add	r30, r0
 b48:	f1 1d       	adc	r31, r1
 b4a:	64 9f       	mul	r22, r20
 b4c:	e0 0d       	add	r30, r0
 b4e:	f1 1d       	adc	r31, r1
 b50:	92 9f       	mul	r25, r18
 b52:	f0 0d       	add	r31, r0
 b54:	83 9f       	mul	r24, r19
 b56:	f0 0d       	add	r31, r0
 b58:	74 9f       	mul	r23, r20
 b5a:	f0 0d       	add	r31, r0
 b5c:	65 9f       	mul	r22, r21
 b5e:	f0 0d       	add	r31, r0
 b60:	99 27       	eor	r25, r25
 b62:	72 9f       	mul	r23, r18
 b64:	b0 0d       	add	r27, r0
 b66:	e1 1d       	adc	r30, r1
 b68:	f9 1f       	adc	r31, r25
 b6a:	63 9f       	mul	r22, r19
 b6c:	b0 0d       	add	r27, r0
 b6e:	e1 1d       	adc	r30, r1
 b70:	f9 1f       	adc	r31, r25
 b72:	bd 01       	movw	r22, r26
 b74:	cf 01       	movw	r24, r30
 b76:	11 24       	eor	r1, r1
 b78:	08 95       	ret

00000b7a <__udivmodsi4>:
 b7a:	a1 e2       	ldi	r26, 0x21	; 33
 b7c:	1a 2e       	mov	r1, r26
 b7e:	aa 1b       	sub	r26, r26
 b80:	bb 1b       	sub	r27, r27
 b82:	fd 01       	movw	r30, r26
 b84:	0d c0       	rjmp	.+26     	; 0xba0 <__udivmodsi4_ep>

00000b86 <__udivmodsi4_loop>:
 b86:	aa 1f       	adc	r26, r26
 b88:	bb 1f       	adc	r27, r27
 b8a:	ee 1f       	adc	r30, r30
 b8c:	ff 1f       	adc	r31, r31
 b8e:	a2 17       	cp	r26, r18
 b90:	b3 07       	cpc	r27, r19
 b92:	e4 07       	cpc	r30, r20
 b94:	f5 07       	cpc	r31, r21
 b96:	20 f0       	brcs	.+8      	; 0xba0 <__udivmodsi4_ep>
 b98:	a2 1b       	sub	r26, r18
 b9a:	b3 0b       	sbc	r27, r19
 b9c:	e4 0b       	sbc	r30, r20
 b9e:	f5 0b       	sbc	r31, r21

00000ba0 <__udivmodsi4_ep>:
 ba0:	66 1f       	adc	r22, r22
 ba2:	77 1f       	adc	r23, r23
 ba4:	88 1f       	adc	r24, r24
 ba6:	99 1f       	adc	r25, r25
 ba8:	1a 94       	dec	r1
 baa:	69 f7       	brne	.-38     	; 0xb86 <__udivmodsi4_loop>
 bac:	60 95       	com	r22
 bae:	70 95       	com	r23
 bb0:	80 95       	com	r24
 bb2:	90 95       	com	r25
 bb4:	9b 01       	movw	r18, r22
 bb6:	ac 01       	movw	r20, r24
 bb8:	bd 01       	movw	r22, r26
 bba:	cf 01       	movw	r24, r30
 bbc:	08 95       	ret

00000bbe <_exit>:
 bbe:	f8 94       	cli

00000bc0 <__stop_program>:
 bc0:	ff cf       	rjmp	.-2      	; 0xbc0 <__stop_program>
