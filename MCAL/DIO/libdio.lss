In archive libdio.a:

dio.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000338  2**0
                  ALLOC
  3 .stab         000005b8  00000000  00000000  00000338  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000050b  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <DIO_voidSetPinValue>:
 * @return None.
 */
void DIO_voidSetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Value)
{
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
   0:	84 30       	cpi	r24, 0x04	; 4
   2:	00 f0       	brcs	.+0      	; 0x4 <DIO_voidSetPinValue+0x4>
   4:	00 c0       	rjmp	.+0      	; 0x6 <DIO_voidSetPinValue+0x6>
   6:	68 30       	cpi	r22, 0x08	; 8
   8:	00 f0       	brcs	.+0      	; 0xa <DIO_voidSetPinValue+0xa>
   a:	00 c0       	rjmp	.+0      	; 0xc <DIO_voidSetPinValue+0xc>
    {
        switch(Copy_u8PortId)   
   c:	81 30       	cpi	r24, 0x01	; 1
   e:	01 f0       	breq	.+0      	; 0x10 <DIO_voidSetPinValue+0x10>
  10:	81 30       	cpi	r24, 0x01	; 1
  12:	00 f0       	brcs	.+0      	; 0x14 <DIO_voidSetPinValue+0x14>
  14:	82 30       	cpi	r24, 0x02	; 2
  16:	01 f4       	brne	.+0      	; 0x18 <DIO_voidSetPinValue+0x18>
  18:	00 c0       	rjmp	.+0      	; 0x1a <DIO_voidSetPinValue+0x1a>
  1a:	83 30       	cpi	r24, 0x03	; 3
  1c:	01 f0       	breq	.+0      	; 0x1e <DIO_voidSetPinValue+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <DIO_voidSetPinValue+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <DIO_voidSetPinValue+0x22>
        {
            case DIO_u8_PORTA:  switch(Copy_u8Value)    
  22:	44 23       	and	r20, r20
  24:	01 f0       	breq	.+0      	; 0x26 <DIO_voidSetPinValue+0x26>
  26:	41 30       	cpi	r20, 0x01	; 1
  28:	01 f0       	breq	.+0      	; 0x2a <DIO_voidSetPinValue+0x2a>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <DIO_voidSetPinValue+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <DIO_voidSetPinValue+0x2e>
                                {
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;  
  2e:	2b b3       	in	r18, 0x1b	; 27
  30:	81 e0       	ldi	r24, 0x01	; 1
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	00 c0       	rjmp	.+0      	; 0x36 <DIO_voidSetPinValue+0x36>
  36:	88 0f       	add	r24, r24
  38:	99 1f       	adc	r25, r25
  3a:	6a 95       	dec	r22
  3c:	02 f4       	brpl	.+0      	; 0x3e <DIO_voidSetPinValue+0x3e>
  3e:	80 95       	com	r24
  40:	82 23       	and	r24, r18
  42:	8b bb       	out	0x1b, r24	; 27
  44:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTA_REG,Copy_u8PinId);     break;   
  46:	2b b3       	in	r18, 0x1b	; 27
  48:	81 e0       	ldi	r24, 0x01	; 1
  4a:	90 e0       	ldi	r25, 0x00	; 0
  4c:	00 c0       	rjmp	.+0      	; 0x4e <DIO_voidSetPinValue+0x4e>
  4e:	88 0f       	add	r24, r24
  50:	99 1f       	adc	r25, r25
  52:	6a 95       	dec	r22
  54:	02 f4       	brpl	.+0      	; 0x56 <DIO_voidSetPinValue+0x56>
  56:	28 2b       	or	r18, r24
  58:	2b bb       	out	0x1b, r18	; 27
  5a:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTB:  switch(Copy_u8Value)
  5c:	44 23       	and	r20, r20
  5e:	01 f0       	breq	.+0      	; 0x60 <DIO_voidSetPinValue+0x60>
  60:	41 30       	cpi	r20, 0x01	; 1
  62:	01 f0       	breq	.+0      	; 0x64 <DIO_voidSetPinValue+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <DIO_voidSetPinValue+0x66>
  66:	00 c0       	rjmp	.+0      	; 0x68 <DIO_voidSetPinValue+0x68>
                                {       
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
  68:	28 b3       	in	r18, 0x18	; 24
  6a:	81 e0       	ldi	r24, 0x01	; 1
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	00 c0       	rjmp	.+0      	; 0x70 <DIO_voidSetPinValue+0x70>
  70:	88 0f       	add	r24, r24
  72:	99 1f       	adc	r25, r25
  74:	6a 95       	dec	r22
  76:	02 f4       	brpl	.+0      	; 0x78 <DIO_voidSetPinValue+0x78>
  78:	80 95       	com	r24
  7a:	82 23       	and	r24, r18
  7c:	88 bb       	out	0x18, r24	; 24
  7e:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTB_REG,Copy_u8PinId);     break;
  80:	28 b3       	in	r18, 0x18	; 24
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	00 c0       	rjmp	.+0      	; 0x88 <DIO_voidSetPinValue+0x88>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	6a 95       	dec	r22
  8e:	02 f4       	brpl	.+0      	; 0x90 <DIO_voidSetPinValue+0x90>
  90:	28 2b       	or	r18, r24
  92:	28 bb       	out	0x18, r18	; 24
  94:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTC:  switch(Copy_u8Value)
  96:	44 23       	and	r20, r20
  98:	01 f0       	breq	.+0      	; 0x9a <DIO_voidSetPinValue+0x9a>
  9a:	41 30       	cpi	r20, 0x01	; 1
  9c:	01 f4       	brne	.+0      	; 0x9e <DIO_voidSetPinValue+0x9e>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <DIO_voidSetPinValue+0xa0>
                                {
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
  a0:	25 b3       	in	r18, 0x15	; 21
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <DIO_voidSetPinValue+0xa8>
  a8:	88 0f       	add	r24, r24
  aa:	99 1f       	adc	r25, r25
  ac:	6a 95       	dec	r22
  ae:	02 f4       	brpl	.+0      	; 0xb0 <DIO_voidSetPinValue+0xb0>
  b0:	80 95       	com	r24
  b2:	82 23       	and	r24, r18
  b4:	85 bb       	out	0x15, r24	; 21
  b6:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTC_REG,Copy_u8PinId);     break;
  b8:	25 b3       	in	r18, 0x15	; 21
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	00 c0       	rjmp	.+0      	; 0xc0 <DIO_voidSetPinValue+0xc0>
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	6a 95       	dec	r22
  c6:	02 f4       	brpl	.+0      	; 0xc8 <DIO_voidSetPinValue+0xc8>
  c8:	28 2b       	or	r18, r24
  ca:	25 bb       	out	0x15, r18	; 21
  cc:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTD:  switch(Copy_u8Value)
  ce:	44 23       	and	r20, r20
  d0:	01 f0       	breq	.+0      	; 0xd2 <DIO_voidSetPinValue+0xd2>
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	01 f4       	brne	.+0      	; 0xd6 <DIO_voidSetPinValue+0xd6>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <DIO_voidSetPinValue+0xd8>
                                {
                                    case  DIO_u8_LOW:   CLR_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
  d8:	22 b3       	in	r18, 0x12	; 18
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	00 c0       	rjmp	.+0      	; 0xe0 <DIO_voidSetPinValue+0xe0>
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
  e4:	6a 95       	dec	r22
  e6:	02 f4       	brpl	.+0      	; 0xe8 <DIO_voidSetPinValue+0xe8>
  e8:	80 95       	com	r24
  ea:	82 23       	and	r24, r18
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	08 95       	ret
                                    case  DIO_u8_HIGH:  SET_BIT(DIO_u8_PORTD_REG,Copy_u8PinId);     break;
  f0:	22 b3       	in	r18, 0x12	; 18
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <DIO_voidSetPinValue+0xf8>
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	6a 95       	dec	r22
  fe:	02 f4       	brpl	.+0      	; 0x100 <DIO_voidSetPinValue+0x100>
 100:	28 2b       	or	r18, r24
 102:	22 bb       	out	0x12, r18	; 18
 104:	08 95       	ret

00000106 <DIO_voidTogglePinValue>:
 * @return None.
 */
void DIO_voidTogglePinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	00 f4       	brcc	.+0      	; 0x10a <DIO_voidTogglePinValue+0x4>
 10a:	68 30       	cpi	r22, 0x08	; 8
 10c:	00 f4       	brcc	.+0      	; 0x10e <DIO_voidTogglePinValue+0x8>
    {
        switch(Copy_u8PortId)   
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	01 f0       	breq	.+0      	; 0x112 <DIO_voidTogglePinValue+0xc>
 112:	81 30       	cpi	r24, 0x01	; 1
 114:	00 f0       	brcs	.+0      	; 0x116 <DIO_voidTogglePinValue+0x10>
 116:	82 30       	cpi	r24, 0x02	; 2
 118:	01 f0       	breq	.+0      	; 0x11a <DIO_voidTogglePinValue+0x14>
 11a:	83 30       	cpi	r24, 0x03	; 3
 11c:	01 f4       	brne	.+0      	; 0x11e <DIO_voidTogglePinValue+0x18>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <DIO_voidTogglePinValue+0x1a>
            case DIO_u8_PORTA: 
                TOG_BIT(DIO_u8_PORTB_REG, Copy_u8PinId); break;   
            case DIO_u8_PORTB: 
                TOG_BIT(DIO_u8_PORTB_REG, Copy_u8PinId); break;
            case DIO_u8_PORTC: 
                TOG_BIT(DIO_u8_PORTB_REG, Copy_u8PinId); break;
 120:	28 b3       	in	r18, 0x18	; 24
 122:	81 e0       	ldi	r24, 0x01	; 1
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	00 c0       	rjmp	.+0      	; 0x128 <DIO_voidTogglePinValue+0x22>
 128:	88 0f       	add	r24, r24
 12a:	99 1f       	adc	r25, r25
 12c:	6a 95       	dec	r22
 12e:	02 f4       	brpl	.+0      	; 0x130 <DIO_voidTogglePinValue+0x2a>
 130:	28 27       	eor	r18, r24
 132:	28 bb       	out	0x18, r18	; 24
 134:	08 95       	ret
            case DIO_u8_PORTD: 
                TOG_BIT(DIO_u8_PORTB_REG, Copy_u8PinId); break;
 136:	28 b3       	in	r18, 0x18	; 24
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	00 c0       	rjmp	.+0      	; 0x13e <DIO_voidTogglePinValue+0x38>
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	6a 95       	dec	r22
 144:	02 f4       	brpl	.+0      	; 0x146 <DIO_voidTogglePinValue+0x40>
 146:	28 27       	eor	r18, r24
 148:	28 bb       	out	0x18, r18	; 24
 14a:	08 95       	ret

0000014c <DIO_voidSetPinDirection>:
 * @return None.
 */
void DIO_voidSetPinDirection(u8 Copy_u8PortId, u8 Copy_u8PinId, u8 Copy_u8Direction)
{
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
 14c:	84 30       	cpi	r24, 0x04	; 4
 14e:	00 f0       	brcs	.+0      	; 0x150 <DIO_voidSetPinDirection+0x4>
 150:	00 c0       	rjmp	.+0      	; 0x152 <DIO_voidSetPinDirection+0x6>
 152:	68 30       	cpi	r22, 0x08	; 8
 154:	00 f0       	brcs	.+0      	; 0x156 <DIO_voidSetPinDirection+0xa>
 156:	00 c0       	rjmp	.+0      	; 0x158 <DIO_voidSetPinDirection+0xc>
    {
        switch(Copy_u8PortId)   
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	01 f0       	breq	.+0      	; 0x15c <DIO_voidSetPinDirection+0x10>
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	00 f0       	brcs	.+0      	; 0x160 <DIO_voidSetPinDirection+0x14>
 160:	82 30       	cpi	r24, 0x02	; 2
 162:	01 f4       	brne	.+0      	; 0x164 <DIO_voidSetPinDirection+0x18>
 164:	00 c0       	rjmp	.+0      	; 0x166 <DIO_voidSetPinDirection+0x1a>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	01 f0       	breq	.+0      	; 0x16a <DIO_voidSetPinDirection+0x1e>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <DIO_voidSetPinDirection+0x20>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <DIO_voidSetPinDirection+0x22>
        {
            case DIO_u8_PORTA:  switch(Copy_u8Direction)    
 16e:	44 23       	and	r20, r20
 170:	01 f0       	breq	.+0      	; 0x172 <DIO_voidSetPinDirection+0x26>
 172:	41 30       	cpi	r20, 0x01	; 1
 174:	01 f0       	breq	.+0      	; 0x176 <DIO_voidSetPinDirection+0x2a>
 176:	00 c0       	rjmp	.+0      	; 0x178 <DIO_voidSetPinDirection+0x2c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <DIO_voidSetPinDirection+0x2e>
                                {
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;  
 17a:	2a b3       	in	r18, 0x1a	; 26
 17c:	81 e0       	ldi	r24, 0x01	; 1
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	00 c0       	rjmp	.+0      	; 0x182 <DIO_voidSetPinDirection+0x36>
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	6a 95       	dec	r22
 188:	02 f4       	brpl	.+0      	; 0x18a <DIO_voidSetPinDirection+0x3e>
 18a:	80 95       	com	r24
 18c:	82 23       	and	r24, r18
 18e:	8a bb       	out	0x1a, r24	; 26
 190:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRA_REG,Copy_u8PinId);     break;   
 192:	2a b3       	in	r18, 0x1a	; 26
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	90 e0       	ldi	r25, 0x00	; 0
 198:	00 c0       	rjmp	.+0      	; 0x19a <DIO_voidSetPinDirection+0x4e>
 19a:	88 0f       	add	r24, r24
 19c:	99 1f       	adc	r25, r25
 19e:	6a 95       	dec	r22
 1a0:	02 f4       	brpl	.+0      	; 0x1a2 <DIO_voidSetPinDirection+0x56>
 1a2:	28 2b       	or	r18, r24
 1a4:	2a bb       	out	0x1a, r18	; 26
 1a6:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTB:  switch(Copy_u8Direction)
 1a8:	44 23       	and	r20, r20
 1aa:	01 f0       	breq	.+0      	; 0x1ac <DIO_voidSetPinDirection+0x60>
 1ac:	41 30       	cpi	r20, 0x01	; 1
 1ae:	01 f0       	breq	.+0      	; 0x1b0 <DIO_voidSetPinDirection+0x64>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <DIO_voidSetPinDirection+0x66>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <DIO_voidSetPinDirection+0x68>
                                {       
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 1b4:	27 b3       	in	r18, 0x17	; 23
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <DIO_voidSetPinDirection+0x70>
 1bc:	88 0f       	add	r24, r24
 1be:	99 1f       	adc	r25, r25
 1c0:	6a 95       	dec	r22
 1c2:	02 f4       	brpl	.+0      	; 0x1c4 <DIO_voidSetPinDirection+0x78>
 1c4:	80 95       	com	r24
 1c6:	82 23       	and	r24, r18
 1c8:	87 bb       	out	0x17, r24	; 23
 1ca:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRB_REG,Copy_u8PinId);     break;
 1cc:	27 b3       	in	r18, 0x17	; 23
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <DIO_voidSetPinDirection+0x88>
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	6a 95       	dec	r22
 1da:	02 f4       	brpl	.+0      	; 0x1dc <DIO_voidSetPinDirection+0x90>
 1dc:	28 2b       	or	r18, r24
 1de:	27 bb       	out	0x17, r18	; 23
 1e0:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTC:  switch(Copy_u8Direction)
 1e2:	44 23       	and	r20, r20
 1e4:	01 f0       	breq	.+0      	; 0x1e6 <DIO_voidSetPinDirection+0x9a>
 1e6:	41 30       	cpi	r20, 0x01	; 1
 1e8:	01 f4       	brne	.+0      	; 0x1ea <DIO_voidSetPinDirection+0x9e>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <DIO_voidSetPinDirection+0xa0>
                                {
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 1ec:	24 b3       	in	r18, 0x14	; 20
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <DIO_voidSetPinDirection+0xa8>
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	6a 95       	dec	r22
 1fa:	02 f4       	brpl	.+0      	; 0x1fc <DIO_voidSetPinDirection+0xb0>
 1fc:	80 95       	com	r24
 1fe:	82 23       	and	r24, r18
 200:	84 bb       	out	0x14, r24	; 20
 202:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRC_REG,Copy_u8PinId);     break;
 204:	24 b3       	in	r18, 0x14	; 20
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	00 c0       	rjmp	.+0      	; 0x20c <DIO_voidSetPinDirection+0xc0>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	02 f4       	brpl	.+0      	; 0x214 <DIO_voidSetPinDirection+0xc8>
 214:	28 2b       	or	r18, r24
 216:	24 bb       	out	0x14, r18	; 20
 218:	08 95       	ret
                                }                            
                                break;
            case DIO_u8_PORTD:  switch(Copy_u8Direction)
 21a:	44 23       	and	r20, r20
 21c:	01 f0       	breq	.+0      	; 0x21e <DIO_voidSetPinDirection+0xd2>
 21e:	41 30       	cpi	r20, 0x01	; 1
 220:	01 f4       	brne	.+0      	; 0x222 <DIO_voidSetPinDirection+0xd6>
 222:	00 c0       	rjmp	.+0      	; 0x224 <DIO_voidSetPinDirection+0xd8>
                                {
                                    case  DIO_u8_INPUT:   CLR_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 224:	21 b3       	in	r18, 0x11	; 17
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	00 c0       	rjmp	.+0      	; 0x22c <DIO_voidSetPinDirection+0xe0>
 22c:	88 0f       	add	r24, r24
 22e:	99 1f       	adc	r25, r25
 230:	6a 95       	dec	r22
 232:	02 f4       	brpl	.+0      	; 0x234 <DIO_voidSetPinDirection+0xe8>
 234:	80 95       	com	r24
 236:	82 23       	and	r24, r18
 238:	81 bb       	out	0x11, r24	; 17
 23a:	08 95       	ret
                                    case  DIO_u8_OUTPUT:  SET_BIT(DIO_u8_DDRD_REG,Copy_u8PinId);     break;
 23c:	21 b3       	in	r18, 0x11	; 17
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	00 c0       	rjmp	.+0      	; 0x244 <DIO_voidSetPinDirection+0xf8>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	02 f4       	brpl	.+0      	; 0x24c <DIO_voidSetPinDirection+0x100>
 24c:	28 2b       	or	r18, r24
 24e:	21 bb       	out	0x11, r18	; 17
 250:	08 95       	ret

00000252 <DIO_voidGetPinValue>:
u8 DIO_voidGetPinValue(u8 Copy_u8PortId, u8 Copy_u8PinId)
{
    
    u8 Local_u8PinValue = 5;
    
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA) && (Copy_u8PinId <= DIO_u8_PIN7) && (Copy_u8PinId >= DIO_u8_PIN0))
 252:	84 30       	cpi	r24, 0x04	; 4
 254:	00 f4       	brcc	.+0      	; 0x256 <DIO_voidGetPinValue+0x4>
 256:	68 30       	cpi	r22, 0x08	; 8
 258:	00 f4       	brcc	.+0      	; 0x25a <DIO_voidGetPinValue+0x8>
    {
        switch(Copy_u8PortId)   
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	01 f0       	breq	.+0      	; 0x25e <DIO_voidGetPinValue+0xc>
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	00 f0       	brcs	.+0      	; 0x262 <DIO_voidGetPinValue+0x10>
 262:	82 30       	cpi	r24, 0x02	; 2
 264:	01 f0       	breq	.+0      	; 0x266 <DIO_voidGetPinValue+0x14>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	01 f4       	brne	.+0      	; 0x26a <DIO_voidGetPinValue+0x18>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <DIO_voidGetPinValue+0x1a>
        {
            case DIO_u8_PORTA:  Local_u8PinValue = GET_BIT(DIO_u8_PINA_REG,Copy_u8PinId);  break;   
 26c:	89 b3       	in	r24, 0x19	; 25
 26e:	00 c0       	rjmp	.+0      	; 0x270 <DIO_voidGetPinValue+0x1e>
            case DIO_u8_PORTB:  Local_u8PinValue = GET_BIT(DIO_u8_PINB_REG,Copy_u8PinId);  break;
 270:	86 b3       	in	r24, 0x16	; 22
 272:	00 c0       	rjmp	.+0      	; 0x274 <DIO_voidGetPinValue+0x22>
            case DIO_u8_PORTC:  Local_u8PinValue = GET_BIT(DIO_u8_PINC_REG,Copy_u8PinId);  break;
 274:	83 b3       	in	r24, 0x13	; 19
 276:	00 c0       	rjmp	.+0      	; 0x278 <DIO_voidGetPinValue+0x26>
            case DIO_u8_PORTD:  Local_u8PinValue = GET_BIT(DIO_u8_PIND_REG,Copy_u8PinId);  break;
 278:	80 b3       	in	r24, 0x10	; 16
 27a:	90 e0       	ldi	r25, 0x00	; 0
 27c:	00 c0       	rjmp	.+0      	; 0x27e <DIO_voidGetPinValue+0x2c>
 27e:	95 95       	asr	r25
 280:	87 95       	ror	r24
 282:	6a 95       	dec	r22
 284:	02 f4       	brpl	.+0      	; 0x286 <DIO_voidGetPinValue+0x34>
 286:	81 70       	andi	r24, 0x01	; 1
 288:	08 95       	ret
 28a:	85 e0       	ldi	r24, 0x05	; 5
    else
    {
        
    }
    return Local_u8PinValue;    
}
 28c:	08 95       	ret

0000028e <DIO_voidSetPortValue>:
 *        the desired output state for each pin in the port.
 * @return None.
 */
void DIO_voidSetPortValue(u8 Copy_u8PortId, u8 Copy_u8Value)
{
    if( (Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA))
 28e:	84 30       	cpi	r24, 0x04	; 4
 290:	00 f4       	brcc	.+0      	; 0x292 <DIO_voidSetPortValue+0x4>
    {
        switch(Copy_u8PortId)   
 292:	81 30       	cpi	r24, 0x01	; 1
 294:	01 f0       	breq	.+0      	; 0x296 <DIO_voidSetPortValue+0x8>
 296:	81 30       	cpi	r24, 0x01	; 1
 298:	00 f0       	brcs	.+0      	; 0x29a <DIO_voidSetPortValue+0xc>
 29a:	82 30       	cpi	r24, 0x02	; 2
 29c:	01 f0       	breq	.+0      	; 0x29e <DIO_voidSetPortValue+0x10>
 29e:	83 30       	cpi	r24, 0x03	; 3
 2a0:	01 f4       	brne	.+0      	; 0x2a2 <DIO_voidSetPortValue+0x14>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <DIO_voidSetPortValue+0x16>
        {
            case DIO_u8_PORTA: SET_PORT_VAL(DIO_u8_PORTA_REG, Copy_u8Value);  break;   
 2a4:	6b bb       	out	0x1b, r22	; 27
 2a6:	08 95       	ret
            case DIO_u8_PORTB: SET_PORT_VAL(DIO_u8_PORTB_REG, Copy_u8Value);  break;
 2a8:	68 bb       	out	0x18, r22	; 24
 2aa:	08 95       	ret
            case DIO_u8_PORTC: SET_PORT_VAL(DIO_u8_PORTC_REG, Copy_u8Value);  break;
 2ac:	65 bb       	out	0x15, r22	; 21
 2ae:	08 95       	ret
            case DIO_u8_PORTD: SET_PORT_VAL(DIO_u8_PORTD_REG, Copy_u8Value);  break;
 2b0:	62 bb       	out	0x12, r22	; 18
 2b2:	08 95       	ret

000002b4 <DIO_voidSetPortDirection>:
 *        Use DIO_u8_OUTPUT to set the port as output, or DIO_u8_INPUT to set it as input.
 * @return None.
 */
void DIO_voidSetPortDirection(u8 Copy_u8PortId, u8 Copy_u8Direction)
{
    if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA))
 2b4:	84 30       	cpi	r24, 0x04	; 4
 2b6:	00 f4       	brcc	.+0      	; 0x2b8 <DIO_voidSetPortDirection+0x4>
    {
        switch(Copy_u8PortId)   
 2b8:	81 30       	cpi	r24, 0x01	; 1
 2ba:	01 f0       	breq	.+0      	; 0x2bc <DIO_voidSetPortDirection+0x8>
 2bc:	81 30       	cpi	r24, 0x01	; 1
 2be:	00 f0       	brcs	.+0      	; 0x2c0 <DIO_voidSetPortDirection+0xc>
 2c0:	82 30       	cpi	r24, 0x02	; 2
 2c2:	01 f0       	breq	.+0      	; 0x2c4 <DIO_voidSetPortDirection+0x10>
 2c4:	83 30       	cpi	r24, 0x03	; 3
 2c6:	01 f4       	brne	.+0      	; 0x2c8 <DIO_voidSetPortDirection+0x14>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <DIO_voidSetPortDirection+0x16>
        {
            case DIO_u8_PORTA:  
                                SET_REG_VAL(DIO_u8_DDRA_REG, Copy_u8Direction);                           
 2ca:	6a bb       	out	0x1a, r22	; 26
 2cc:	08 95       	ret
                                break;
            case DIO_u8_PORTB:  
                                SET_REG_VAL(DIO_u8_DDRB_REG, Copy_u8Direction);                           
 2ce:	67 bb       	out	0x17, r22	; 23
 2d0:	08 95       	ret
                                break;
            case DIO_u8_PORTC:  
                                SET_REG_VAL(DIO_u8_DDRC_REG, Copy_u8Direction);                           
 2d2:	64 bb       	out	0x14, r22	; 20
 2d4:	08 95       	ret
                                break;
            case DIO_u8_PORTD: 
                                SET_REG_VAL(DIO_u8_DDRD_REG, Copy_u8Direction);                           
 2d6:	61 bb       	out	0x11, r22	; 17
 2d8:	08 95       	ret

000002da <DIO_voidGetPortValue>:
 */
u8 DIO_voidGetPortValue(u8 Copy_u8PortId)
{
    u8 Local_u8PinValue = 5;
    
    if( (Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PortId >= DIO_u8_PORTA))
 2da:	84 30       	cpi	r24, 0x04	; 4
 2dc:	00 f4       	brcc	.+0      	; 0x2de <DIO_voidGetPortValue+0x4>
    {
        switch(Copy_u8PortId)   
 2de:	81 30       	cpi	r24, 0x01	; 1
 2e0:	01 f0       	breq	.+0      	; 0x2e2 <DIO_voidGetPortValue+0x8>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	00 f0       	brcs	.+0      	; 0x2e6 <DIO_voidGetPortValue+0xc>
 2e6:	82 30       	cpi	r24, 0x02	; 2
 2e8:	01 f0       	breq	.+0      	; 0x2ea <DIO_voidGetPortValue+0x10>
 2ea:	83 30       	cpi	r24, 0x03	; 3
 2ec:	01 f4       	brne	.+0      	; 0x2ee <DIO_voidGetPortValue+0x14>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <DIO_voidGetPortValue+0x16>
        {
            case DIO_u8_PORTA:  Local_u8PinValue = GET_REG_VAL(DIO_u8_PINA_REG);  break;   
 2f0:	89 b3       	in	r24, 0x19	; 25
 2f2:	08 95       	ret
            case DIO_u8_PORTB:  Local_u8PinValue = GET_REG_VAL(DIO_u8_PINB_REG);  break;
 2f4:	86 b3       	in	r24, 0x16	; 22
 2f6:	08 95       	ret
            case DIO_u8_PORTC:  Local_u8PinValue = GET_REG_VAL(DIO_u8_PINC_REG);  break;
 2f8:	83 b3       	in	r24, 0x13	; 19
 2fa:	08 95       	ret
            case DIO_u8_PORTD:  Local_u8PinValue = GET_REG_VAL(DIO_u8_PIND_REG);  break;
 2fc:	80 b3       	in	r24, 0x10	; 16
 2fe:	08 95       	ret
 300:	85 e0       	ldi	r24, 0x05	; 5
    else
    {
        
    }
    return Local_u8PinValue; 
 302:	08 95       	ret
